{"version":3,"file":"lib.module.js","sources":["../node_modules/prop-types/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/node_modules/react-is/index.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../src/lib/utils/storage.js","../src/lib/utils/browser.js","../src/lib/stages/Stages.js","../src/lib/utils/hooks.js","../src/lib/stages/HashRouter.js","../src/lib/stages/Navigation.jsx","../src/lib/stages/Progression.jsx","../src/lib/stages/Debugger.js","../src/lib/form/Form.js","../src/lib/form/Actions.jsx","../src/lib/fieldsets/plain/Input.js","../src/lib/fieldsets/plain/CheckBox.js","../src/lib/fieldsets/plain/Select.js","../src/lib/fieldsets/plain/RadioGroup.js","../src/lib/fieldsets/plain/Dummy.js","../src/lib/fieldsets/plain/index.js"],"sourcesContent":["/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","const getDataFromStorage = (id, type, prefix = \"stages-form-\") => {\n    if ((type === \"local\" && typeof localStorage !== 'undefined') || (type === \"session\" && typeof sessionStorage !== 'undefined')) {\n        const stringifiedStoredState = localStorage.getItem(`${prefix}${id}`) || '{}';\n        let storedState = {};\n        try {\n            storedState = JSON.parse(stringifiedStoredState);\n        } catch (e) {};\n        return storedState;\n    }\n    return {};\n};\n  \nconst saveDataToStorage = (id, data = {}, type, prefix = \"stages-form-\") => {\n    if (((type === \"local\" && typeof localStorage !== 'undefined') || (type === \"session\" && typeof sessionStorage !== 'undefined')) && typeof data === \"object\") {\n        let stringifiedState = \"{}\";\n        try {\n            stringifiedState = JSON.stringify(data);\n        } catch (e) {};\n        localStorage.setItem(`${prefix}${id}`, stringifiedState);\n    }\n};\n\nconst removeDataFromStorage = (id, type, prefix = \"stages-form-\") => {\n    if ((type === \"local\" && typeof localStorage !== 'undefined') || (type === \"session\" && typeof sessionStorage !== 'undefined')) {\n        localStorage.removeItem(`${prefix}${id}`);\n    }\n};\n\nexport {\n    getDataFromStorage,\n    saveDataToStorage,\n    removeDataFromStorage\n};","/**\n * Check if the element is in the browser viewport\n * \n * @param {*} el the element\n * @returns {boolean} true if the element is in the browser viewport\n */\nconst isElementInViewport = el => {\n    const rect = el.getBoundingClientRect();\n\n    return (\n        rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /* or $(window).height() */\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth) /* or $(window).width() */\n    );\n}\n\n// @ts-ignore\nconst isDebugging = () => typeof window !== \"undefined\" && typeof window.stagesLogging === \"function\";\n\nfunction isPromise(p) {\n    return p && Object.prototype.toString.call(p) === \"[object Promise]\";\n}\n\nexport {\n    isElementInViewport,\n    isDebugging,\n    isPromise\n};","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport findIndex from \"lodash/findindex\";\n\nimport { getDataFromStorage, saveDataToStorage, removeDataFromStorage } from \"../utils/storage\";\nimport { isDebugging } from \"../utils/browser\";\n\n/**\n * The Stages component is your main component to build everything from simple wizards\n * to complicated dynamic multi stage form constructs. Some of it's possible usecases:\n *\n * - Forms (one stage)\n * - Wizards (multiple stages, linear progression)\n * - Dynamic Wizard (multiple dynamic stages, non linear progression)\n * - Text Adventure (multiple stages, free progression)\n * - Quiz (One or multiple stages, with custom validation and locked fields)\n * - Accordion Form (stages rendered inside an accordion)\n * - Slideshow (multiple stages, no validation, keyboard navigation)\n * - Router (for SPAs)\n *\n * @param {Object} props - An object containing the following keys:\n *   - children: an array of functions that return a JSX element to render each step\n *   - initialData: an object containing the initial data for the form\n *   - initialStep: the index of the step to start on\n *   - render: a function that returns the JSX to render the component\n *   - validateOnStepChange: a boolean indicating whether to validate on step change\n *   - onChange: a function to call when data changes\n *   - autoSave: a string or object indicating whether to save data automatically\n *   - id: a string indicating the unique identifier for the component\n * @return {JSX.Element} The rendered component or null\n */\nconst Stages = ({\n    children,\n    initialData,\n    initialStep,\n    render,\n    validateOnStepChange,\n    onChange,\n    autoSave,\n    id\n}) => {\n    /**\n     * Creates the initial data for the wizard, either from saved data or the default initialData.\n     *\n     * @return {Object} The initial data for the editor.\n     */\n    const createInitialData = () => {\n        // If autosave is enabled, read the data and trigger an onChange with it:\n        if (\n            id && (autoSave === \"local\" || autoSave === \"session\" || (typeof autoSave === \"object\" && (autoSave.type === \"local\" || autoSave.type === \"session\")))) {\n            const savedData = getDataFromStorage(id, typeof autoSave === \"object\" ? autoSave.type : autoSave);\n            if (Object.keys(savedData).length > 0) {\n                return savedData;\n            }\n        } else if (id && typeof autoSave === \"object\" && autoSave.type === \"custom\" && typeof autoSave.get === \"function\") {\n            const savedData = autoSave.get(id);\n            if (Object.keys(savedData).length > 0) {\n                return savedData;\n            }\n        }\n        return initialData;\n    };\n\n    const [uniqId] = useState(`stages-${id ? id : + new Date()}`);\n    const [data, setData] = useState(createInitialData());\n    const [activeChildren, setActiveChildren] = useState([]);\n    const [errors, setErrors] = useState({});\n    const [currentStep, setCurrentStep] = useState(initialStep || 0);\n    const [keys, setKeys] = useState([]);\n\n    /**\n     * Get only the data for a specific step.\n     * \n     * @param {Number} index the step index\n     * @returns {Object} the data for the step at index\n     */\n    const getStepData = index => {\n        const key = keys && keys[index] ? keys[index].key : index;\n        return data && data[key] ? data[key] : {};\n    };\n\n    /*\n        This function receives the step key from each step and\n        packs them into an array which is than used by the router.\n    */\n\n    /**\n     * This function receives the step key from each step and\n     * packs them into an array which is than used by the router.\n     *\n     * @param {string} key - the key to set\n     * @param {number} index - the index to set the key at\n     * @return {string} the key that was set\n     */\n    const setStepKey = (key, index) => {\n        if (!keys[index]) {\n            keys[index] = {key, visible: true};\n            setKeys([...keys]);\n        }\n        return key;\n    };\n\n    /**\n     * This function is called by step forms and updates data and errors.\n     *\n     * @param {Object} changedData - The changed data.\n     * @param {Object} stepErrors - The errors to show for the form step.\n     * @param {string} formId - The id of the form.\n     */\n    const handleOnChange = (changedData, stepErrors, formId) => {\n        const newData = Object.assign({}, data);\n        const key = keys && keys[formId] ? keys[formId].key : formId;\n\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Handle onChange for \"${key}\"`, uniqId);\n\n        errors[formId] = stepErrors;\n        setErrors(Object.assign({}, errors));\n\n        newData[key] = changedData;\n        data[key] = changedData;\n        setData(Object.assign({}, newData));\n\n        if (typeof onChange === \"function\") onChange({ data: newData, errors });\n\n        // Auto save data if enabled:\n        if (id) {\n            if (autoSave === \"local\" || autoSave === \"session\") {\n                if (Object.keys(errors).length === 0) saveDataToStorage(id, newData, autoSave);\n            } else if (typeof autoSave === \"object\" && (autoSave.type === \"local\" || autoSave.type === \"session\")) {\n                if ((autoSave.validDataOnly && Object.keys(errors).length === 0) || !autoSave.validDataOnly) {\n                    saveDataToStorage(id, newData, autoSave.type);\n                }\n            } else if (id && typeof autoSave === \"object\" && autoSave.type === \"custom\" && typeof autoSave.save === \"function\") {\n                if ((autoSave.validDataOnly && Object.keys(errors).length === 0) || !autoSave.validDataOnly) {\n                    autoSave.save(id, newData);\n                }\n            }\n        }\n    };\n\n    /**\n     * Resets the data to its initial value and current step to zero.\n     */\n    const reset = () => {\n        if (id) {\n            if (autoSave === \"local\" || autoSave === \"session\") removeDataFromStorage(id, autoSave);\n            if (typeof autoSave === \"object\" && (autoSave.type === \"local\" || autoSave.type === \"session\")) removeDataFromStorage(id, autoSave.type);\n            if (id && typeof autoSave === \"object\" && autoSave.type === \"custom\" && typeof autoSave.remove === \"function\") {\n                autoSave.remove(id);\n            }\n        }\n        setData(initialData);\n        setCurrentStep(0);\n        if (typeof onChange === \"function\") onChange({ data: initialData, errors });\n    }\n\n    /*\n        If there is a logging function registered on the window (Stages browser extension), send data to it:\n    */\n    useEffect(() => {\n        if (isDebugging()) {\n            if (id && (autoSave === \"local\" || autoSave === \"session\" || (typeof autoSave === \"object\" && (autoSave.type === \"local\" || autoSave.type === \"session\")))) {\n                // @ts-ignore\n                window.stagesLogging({ id: uniqId, keys, data, initialData, initialStep, errors, currentStep, savedData: getDataFromStorage(id, typeof autoSave === \"object\" ? autoSave.type : autoSave) });\n            } else if (id && typeof autoSave === \"object\" && autoSave.type === \"custom\" && typeof autoSave.get === \"function\") {\n                // @ts-ignore\n                window.stagesLogging({ id: uniqId, keys, data, initialData, initialStep, errors, currentStep, savedData: autoSave.get(id) });\n            } else {\n                // @ts-ignore\n                window.stagesLogging({ id: uniqId, keys, data, initialData, initialStep, errors, currentStep, savedData: {} });\n            }\n        }\n    }, [keys, data, errors, currentStep]);\n\n    /*\n        Run through steps first to get all the keys:\n    */\n    useEffect(() => {\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Init Stages`, uniqId);\n\n        children.map((item, index) => item({\n            index,\n            setStepKey,\n            initializing: true\n        })).filter(item => item);\n    }, []);\n\n    /*\n        On each step change, check if the new step is valid, but only if validation \n        is required by the Stages current setup.\n    */\n    useEffect(() => {\n        if (validateOnStepChange) {\n            const lastValidStep = calculateLastValidStep();\n            if (lastValidStep < currentStep) {\n                setCurrentStep(lastValidStep === -1 ? 0 : lastValidStep + 1);\n            }\n        }\n\n        // render with new data:\n        setActiveChildren(\n            children.map((item, index) => item({\n                data: getStepData(index),\n                allData: data,\n                onChange: handleOnChange,\n                reset,\n                onNav,\n                isActive: index === currentStep,\n                index,\n                errors: errors[index] || {},\n                setStepKey\n            })).filter((item, index) => {\n                const isVisible = item !== null;\n                if (keys[index]) keys[index].visible = isVisible;\n                return isVisible;\n            })\n        );\n    }, [currentStep, data]);\n\n    /*\n        This function is called on navigations by sub components. Following actions are possible:\n        - next: Jumps to the next step\n        - prev: Jumps to the prev step if possible\n        - first: Jumps to the first step\n        - last: Jumps to the last step if possible\n        - lastValid: Jumps ton the last valid step\n        - step: Jumps to a specific step\n    */\n\n    /**\n     * This function is called on navigations by sub components. Following actions are possible:\n     *  - next: Jumps to the next step\n     *  - prev: Jumps to the prev step if possible\n     *  - first: Jumps to the first step\n     *  - last: Jumps to the last step if possible\n     *  - lastValid: Jumps ton the last valid step\n     *  - step: Jumps to a specific step\n     * \n     * @param {string} navType - The type of navigation to perform.\n     * @param {number|string} nr - The step number or key to navigate to.\n     *   If `navType` is \"step\" and `nr` is a string, the key will be used to find the step.\n     */\n    const onNav = (navType, nr) => {\n        let newStepNr = currentStep;\n\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`On nav \"${navType}\" -> \"${nr}\"`, uniqId);\n        \n        if (navType === \"next\") {\n            // Find the next step that is visible:\n            let found = false;\n            for (let i = currentStep + 1; i < keys.length; i++) {\n                if (keys[i].visible && !found) {\n                    newStepNr = i;\n                    found = true;\n                }\n            }\n        }\n        if (navType === \"prev\") {\n            // Find the next lower step that is visible:\n            let found = false;\n            for (let i = currentStep -1; i >= 0; i--) {\n                if (keys[i].visible && !found) {\n                    newStepNr = i;\n                    found = true;\n                }\n            }\n        }\n        if (navType === \"first\") {\n            // Find the first step that is visible:\n            let found = false;\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i].visible && !found) {\n                    newStepNr = i;\n                    found = true;\n                }\n            }\n        }\n        if (navType === \"last\") {\n            // find the last step that is visible:\n            let found = false;\n            for (let i = keys.length - 1; i >= 0; i--) {\n                if (keys[i].visible && !found) {\n                    newStepNr = i;\n                    found = true;\n                }\n            }\n        };\n        if (navType === \"lastValid\") newStepNr = calculateLastValidStep();\n        if (navType === \"step\" && keys[nr] && keys[nr].visible) {\n            newStepNr = Number(nr);\n        } else if (navType === \"step\" && typeof nr === \"string\") {\n            const index = findIndex(keys, { key: nr });\n            if (index > -1) newStepNr = index;\n        }\n\n        if (newStepNr < 0) newStepNr = 0;\n        if (newStepNr > keys.length) newStepNr = keys.length;\n\n        setCurrentStep(newStepNr);\n    };\n\n    /**\n     * The callback for the navigation component.\n     * \n     * @param {number|string} step \n     */\n    const onChangeStep = step => {\n        const lastValidStep = calculateLastValidStep();\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`On change step \"${step}\"`, uniqId);\n        if (\n            (typeof lastValidStep === \"number\" && typeof step === \"number\" && lastValidStep + 1 >= step) || \n            validateOnStepChange === false\n        ) {\n            setCurrentStep(step);\n        }\n    };\n\n    /**\n     * Calculates the last valid step. In other words, the last step which contains a form\n     * with no validation errors.\n     *\n     * @return {number} The index of the last valid step.\n     */\n    const calculateLastValidStep = () => {\n        let lastValidStep = -1;\n        let stepFailed = false;\n\n        Object.keys(errors).forEach(index => {\n            const keysIndex = findIndex(keys, { key: index });\n            if ((Object.keys(errors[index]).length === 0 || (keysIndex > -1 && !keys[keysIndex].visible)) && !stepFailed) {\n                lastValidStep = Number(index);\n            } else {\n                stepFailed = true;\n            }\n        });\n\n        return lastValidStep;\n    };\n\n    /**\n     * Calculate the step progression based on the number of valid, filled out steps.\n     *\n     * @return {Object} An object containing the current step, the total number of steps, \n     * the number of valid steps, the percentage of valid steps, the data and the errors.\n     */\n    const calculateProgression = () => {\n        const stepCount = activeChildren.length;\n        const lastValidStep = calculateLastValidStep();\n        let validSteps = 0;\n\n        Object.keys(errors).forEach((error, index) => {\n            const stepData = getStepData(index);\n            if (index <= lastValidStep && Object.keys(errors[index]).length === 0 && Object.keys(stepData).length > 0) {\n                validSteps++;\n            }\n        });\n\n        return {\n            currentStep,\n            stepCount,\n            validSteps,\n            percentage: 100 / stepCount * validSteps,\n            data,\n            errors\n        };\n    };\n\n    if (activeChildren.length === 0) return null;\n\n    /*\n        Now render all the render props:\n    */\n    return render ? render({\n        navigationProps: {\n            currentStep,\n            data,\n            onChangeStep,\n            errors,\n            keys,\n            stepCount: activeChildren.length,\n            lastValidStep: calculateLastValidStep(),\n            reset\n        },\n        progressionProps: calculateProgression(),\n        routerProps: { step: currentStep, onChange: setCurrentStep, keys: keys },\n        steps: activeChildren\n    }) : null;\n};\n\nStages.propTypes = {\n    //** @type {React.ReactElement|Function} The steps of the wizard */\n    children: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.node, PropTypes.func])).isRequired,\n    //** @type {Object} The initial data */\n    initialData: PropTypes.object,\n    //** @type {React.ReactElement|Function} A render function which is called to render the wizard layout */\n    render: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    //** @type {number} The initial step index */\n    initialStep: PropTypes.number,\n    //** @type {boolean} Whether to validate the wizard on step change */\n    validateOnStepChange: PropTypes.bool,\n    //** @type {string|number} The wizards id which is shown in the debugger */\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nStages.defaultProps = {\n    initialData: {},\n    validateOnStepChange: true,\n    autoSave: false\n};\n\nexport default Stages;","import { useState, useEffect, useCallback } from \"react\";\n\n// As the react-use library took up a large part of Stages and was only \n// used in this function, we extracted here what was needed.\n// For the original implementation and docs head over to:\n// https://github.com/streamich/react-use\n\nconst useEffectOnce = (effect) => {\n    useEffect(effect, []);\n};\n\nconst useMount = (fn) => {\n    useEffectOnce(() => {\n        fn();\n    });\n};\n\nconst on = (obj, ...args) => {\n    if (obj && obj.addEventListener) {\n        obj.addEventListener(...args);\n    }\n};\n\nconst off = (obj, ...args) => {\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener(...args);\n    }\n};\n\nconst useLifecycles = (mount, unmount) => {\n    useEffect(() => {\n        if (mount) {\n            mount();\n        }\n        return () => {\n            if (unmount) {\n                unmount();\n            }\n        };\n    }, []);\n};\n\nconst useHash = () => {\n    const [hash, setHash] = useState(() => window.location.hash);\n\n    const onHashChange = useCallback(() => {\n        setHash(window.location.hash);\n    }, []);\n\n    useLifecycles(\n        () => {\n            on(window, 'hashchange', onHashChange);\n        },\n        () => {\n            off(window, 'hashchange', onHashChange);\n        }\n    );\n\n    const _setHash = useCallback(\n        (newHash) => {\n            if (newHash !== hash) {\n                window.location.hash = newHash;\n            }\n        },\n        [hash]\n    );\n\n    return [hash, _setHash];\n};\n\nexport {\n    useEffectOnce,\n    useMount,\n    useLifecycles,\n    useHash\n};","import { useState, useEffect } from \"react\";\nimport findIndex from \"lodash/findindex\";\n\nimport { useMount, useHash } from \"../utils/hooks\";\n\n/**\n * This is our default router for Stages. It uses URL hashes.\n * It will fallback to numbers if you don't supply keys to\n * Stages.\n *\n * With keys: #!mystep\n * With numbers: #!1\n *\n * @param {Object} props - The component props.\n * @param {number} props.step - The current step index.\n * @param {Function} props.onChange - A callback function to be invoked when the step changes.\n * @param {Array<object>} props.keys - An array of objects with a \"key\" property for each step.\n * @param {string} props.prefix - A string prefix to be added to the step index if keys are not defined.\n * @param {string} [props.hashFormat=\"#!\"] - The format of the hash, defaults to \"#!\".\n */\nconst HashRouter = ({ step, onChange, keys, prefix, hashFormat = \"#!\" }) => {\n    const [hash, setHash] = useHash();\n    const [isMounted, setIsMounted] = useState(false);\n\n    const isPositiveInteger = str => {\n        var n = Math.floor(Number(str));\n        return n !== Infinity && String(n) === str && n >= 0;\n    }\n\n    const getHashFromIndex = stepIndex => {\n        if (keys && keys[stepIndex]) return keys[stepIndex].key;\n        return prefix ? `${prefix}-${stepIndex}` : stepIndex;\n    };\n\n    const getIndexFromHash = hash => {\n        // hash can be a number or id:\n        // #!mystep\n        // #!1\n        const hashSplit = hash.split(hashFormat);\n        if (hashSplit.length === 2) {\n            const hashStr = hashSplit[1];\n            if (isPositiveInteger(hashStr)) {\n                return Number(hashStr);\n            }\n            return findIndex(keys, { key: hashStr });\n        }\n        return -1;\n    };\n\n    const handleHashes = () => {\n        if (typeof hash === \"string\" && hash.indexOf(hashFormat) !== -1) {\n            const index = getIndexFromHash(hash);\n            if (index !== -1) {\n                if (typeof setHash === \"function\") setHash(`${hashFormat}${getHashFromIndex(index)}`);\n                onChange(index);\n            }\n        } else {\n            if (typeof setHash === \"function\") setHash(`${hashFormat}${getHashFromIndex(step)}`);\n        }\n    };\n\n    useEffect(() => {\n        if (isMounted) {\n            handleHashes();\n        }\n    }, [hash]);\n\n    useEffect(() => {\n        if (isMounted) {\n            if (typeof setHash === \"function\") setHash(`${hashFormat}${getHashFromIndex(step)}`);\n        }\n    }, [step]);\n\n    useMount(() => {\n        handleHashes();\n        setIsMounted(true);\n    });\n\n    return null;\n};\n\nexport default HashRouter;","import React from \"react\";\n\n/**\n * This is a default component for a Stages navigation. It is ment as\n * a sample on how to build your own, but of course you can use it if it\n * fits your usecase.\n *\n * @param {Object} props - The component props.\n * @param {number} props.currentStep - The current step of the navigation.\n * @param {Object} props.data - Current data in the wizard, can be used to display step summaries.\n * @param {function} props.onChangeStep - Function to call when the step should change.\n * @param {Object} props.errors - Object containing error data for each step.\n * @param {number} props.lastValidStep - The last valid step in the wizard.\n * @param {Array<object>} props.keys - All the step keys in the wizard.\n * @param {number} props.stepCount - The number of steps in the wizard.\n * @param {function} props.reset - Function to call when the navigation is reset.\n * @return {JSX.Element} - The navigation component.\n */\nconst Navigation = ({ currentStep, data, onChangeStep, errors, lastValidStep, keys, stepCount, reset }) => {\n    const items = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        if (keys && keys[i] && keys[i].visible) {\n            const stepName = keys && keys[i] ? keys[i].key : `Step ${i + 1}`;\n\n            if (currentStep === i) {\n                items.push(<li key={stepName} style={{ textTransform: \"capitalize\" }}><strong>{stepName}</strong></li>);\n            } else if ((lastValidStep > -1 && lastValidStep + 1 < i) || lastValidStep === -1 && i > 0) {\n                items.push(<li key={stepName} style={{ color: \"#999\", textTransform: \"capitalize\" }}>{stepName}</li>);\n            } else {\n                items.push(<li key={stepName} style={{ textTransform: \"capitalize\" }} onClick={() => onChangeStep(i)}>{stepName}</li>);\n            }\n        }\n    }\n\n    return (\n        <ul>{items}</ul>\n    );\n};\n\nexport default Navigation;","import React from \"react\";\n\n/**\n * This is a default component for a Stages navigation. It is ment as\n * a sample on how to build your own, but of course you can use it if it\n * fits your usecase.\n *\n * @param {Object} props - The component props.\n * @param {number} props.stepCount - the total number of steps\n * @param {number} props.validSteps - the number of valid steps\n * @param {number} props.percentage - the percentage of valid steps\n * @return {JSX.Element} - a React component displaying the valid steps, the total steps, and the percentage of valid steps\n */\nconst Progression = ({ stepCount, validSteps, percentage }) => {\n    return (\n        <div>{`${validSteps} / ${stepCount} (${Math.round(percentage)}%)`}</div>\n    );\n};\n\nexport default Progression;","// @ts-nocheck\nimport React, { useEffect, useState } from \"react\";\nimport beautify from 'json-beautify';\nimport get from \"lodash/get\";\n\n/**\n * An utiility component to help debug the wizard or individual forms.\n *\n * @return {JSX.Element} The rendered debugging console.\n */\nconst Debugger = () => {\n    const [data, setData] = useState({});\n    const [logHistory, setLogHistory] = useState({});\n    const [selection, setSelection] = useState({});\n    const [paths, setPaths] = useState({});\n    const [showDebugger, setShowDebugger] = useState(false);\n\n    const getData = (eventData, uniqId) => {\n        if (typeof eventData === \"string\") {\n            if (!logHistory[uniqId]) logHistory[uniqId] = [];\n            logHistory[uniqId].push({\n                action: eventData,\n                time: + new Date()\n            });\n            setLogHistory(logHistory);\n        } else {\n            const newData = Object.assign(data, {});\n            const firstKey = Object.keys(newData)[0];\n            newData[eventData.id] = eventData;\n            setData({...newData});\n            setSelection(sel => {\n                return {\n                    key: !sel.key ? firstKey : sel.key,\n                    tab: !sel.tab ? \"data\" : sel.tab\n                };\n            });\n        }\n    };\n\n    useEffect(() => {\n        if (typeof window !== \"undefined\") {\n            window.stagesLogging = getData;\n        }\n    }, []);\n\n    if (Object.keys(data).length === 0) return null;\n\n    return (\n        <div\n            style={{\n                position: \"absolute\",\n                top: \"8px\",\n                right: \"8px\",\n                width: \"320px\",\n                padding: \"8px\",\n                fontSize: \"14px\",\n                color: \"#333\",\n                border: \"1px #bbb solid\",\n                borderRadius: \"4px\",\n                background: \"#fbfbfb\",\n                fontFamily: \"Open Sans, Helvetica, Arial, sans\",\n                zIndex: 1000\n            }}\n        >\n            <strong style={{lineHeight: \"22px\"}}>Debugger:</strong>\n            <button\n                type=\"button\"\n                style={{float: \"right\"}}\n                onClick={() => setShowDebugger(!showDebugger)}\n            >\n                {showDebugger ? \"hide\" : \"show\"}\n            </button>\n            {showDebugger ? Object.keys(data).map(key => {\n                const keySplit = key.split(\"-\");\n                keySplit.pop();\n                let output = \"\";\n                if (selection.tab === \"logs\") {\n                    output = logHistory[selection.key] ? logHistory[selection.key].map(l => `${l.time}: ${l.action}`).join(\"\\n\") : \"\";\n                } else {\n                    output = beautify(paths[key] ? get(data[selection.key][selection.tab], paths[key] || \"\") : data[selection.key][selection.tab], null, 2);\n                }\n                return (\n                    <div key={`${key}-${selection.tab}`}>\n                        <h3 style={{\n                            background: \"#333\",\n                            color: \"#fff\",\n                            margin: \"8px 0 0 0\",\n                            padding: \"2px 6px\",\n                            textTransform: \"capitalize\",\n                            position: \"relative\"\n                        }}>\n                            {keySplit.join(\" \")}:\n                            {data[key].isDirty ? <span style={{\n                                display: \"inline-block\",\n                                position: \"absolute\",\n                                top: \"5px\",\n                                right: \"4px\",\n                                background: \"#f30\",\n                                color: \"#fff\",\n                                fontSize: \"11px\",\n                                padding: \"1px 4px\"\n                            }}>dirty</span> : null}\n                            {Object.keys(data[key].errors).length ? <span style={{\n                                display: \"inline-block\",\n                                position: \"absolute\",\n                                top: \"5px\",\n                                right: \"48px\",\n                                background: \"#f30\",\n                                color: \"#fff\",\n                                fontSize: \"11px\",\n                                padding: \"1px 4px\"\n                            }}>errors</span> : null}\n                            {data[key].loading ? <span style={{\n                                display: \"inline-block\",\n                                position: \"absolute\",\n                                top: \"5px\",\n                                right: \"98px\",\n                                background: \"#f30\",\n                                color: \"#fff\",\n                                fontSize: \"11px\",\n                                padding: \"1px 4px\"\n                            }}>loading</span> : null}\n                        </h3>\n                        <div>\n                            <select\n                                onChange={e => setSelection({key: key, tab: e.target.value})} value={selection.key === key ? selection.tab : \"data\"}\n                                style={{ width: \"47%\", minWidth: \"47%\", maxWidth: \"47%\", marginRight: \"2%\", height: \"25px\" }}\n                            >\n                                {data[key].keys ? (\n                                    <>\n                                        <option value=\"data\">Data</option>\n                                        <option value=\"errors\">Errors</option>\n                                        <option value=\"initialData\">Initial Data</option>\n                                        <option value=\"savedData\">Saved Data</option>\n                                        <option value=\"keys\">Keys</option>\n                                        <option value=\"logs\">Logs</option>\n                                    </>\n                                ) : (\n                                    <>\n                                        <option value=\"data\">Data</option>\n                                        <option value=\"errors\">Errors</option>\n                                        <option value=\"parsedFieldConfig\">Field Config</option>\n                                        <option value=\"initialData\">Initial Data</option>\n                                        <option value=\"interfaceState\">Interface State</option>\n                                        <option value=\"undoData\">Undo Data</option>\n                                        <option value=\"asyncData\">Async Data</option>\n                                        <option value=\"savedData\">Saved Data</option>\n                                        <option value=\"fieldPaths\">Field Paths</option>\n                                        <option value=\"logs\">Logs</option>\n                                    </>\n                                )}\n                            </select>\n                            <input value={paths[key] || \"\"} placeholder=\"your.data.filter.path\" onChange={e => {\n                                const newPaths = Object.assign({}, paths);\n                                newPaths[key] = e.target.value;\n                                setPaths(newPaths);\n                            }} style={{\n                                width: \"47%\",\n                                minWidth: \"47%\",\n                                maxWidth: \"47%\",\n                                fontSize: \"12px\",\n                                border: \"1px #ccc solid\",\n                                background: \"#fbfbfb\",\n                                marginTop: \"4px\",\n                                padding: \"4px\",\n                                overflowX: \"scroll\",\n                                whiteSpace: \"pre\"\n                            }} />\n                        </div>\n                        {selection && selection.key === key ? (\n                            <textarea readOnly style={{\n                                width: \"calc(100% - 8px)\",\n                                minWidth: \"calc(100% - 8px)\",\n                                maxWidth: \"calc(100% - 8px)\",\n                                height: \"200px\",\n                                fontSize: \"10px\",\n                                border: \"1px #ccc solid\",\n                                background: \"#fbfbfb\",\n                                marginTop: \"8px\",\n                                overflowX: \"scroll\",\n                                whiteSpace: \"pre\"\n                            }} value={output} />\n                        ) : null}\n                    </div>\n                );\n             }) : null}\n        </div>\n    );\n};\n\nexport default Debugger;","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport find from \"lodash/find\";\nimport sortBy from \"lodash/sortby\";\nimport findIndex from \"lodash/findindex\";\nimport uniqWith from \"lodash/uniqwith\";\nimport isEqual from \"lodash/isequal\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\nimport merge from \"lodash/merge\";\nimport stringify from \"fast-json-stable-stringify\";\n\nimport { getDataFromStorage, saveDataToStorage, removeDataFromStorage } from \"../utils/storage\";\nimport { isElementInViewport, isDebugging, isPromise } from \"../utils/browser\";\n\n/**\n * Cast a value to a specific type\n * \n * @param {*} value any type of value which should be casted to specific type\n * @param {string} type one of the following types: number, string, boolean, date\n * @param {boolean} [parseAsArray] should each element of an array be casted?\n * @returns {*} the casted value\n */\nconst castValueStrType = (value, type, parseAsArray) => {\n    if (parseAsArray && Array.isArray(value)) {\n        if (type === \"number\") return value.map(v => Number(v));\n        if (type === \"string\") return value.map(v => String(v));\n        if (type === \"boolean\") return value.map(v => Boolean(v));\n        if (type === \"date\") return value.map(v => new Date(v));\n        return value;\n    }\n    if (type === \"number\") return Number(value);\n    if (type === \"string\") return String(value);\n    if (type === \"boolean\") return Boolean(value);\n    if (type === \"date\") return new Date(value);\n    return value;\n};\n\n/**\n * Get all possible combinations of all the elements between two input arrays\n * \n * @param {Array<any>} arr1 first input array\n * @param {Array<any>} arr2 second input array\n * @returns {Array<any>} all combinations\n */\nconst getCombosFromTwoArrays = (arr1 = [], arr2 = []) => {\n    const res = [];\n\n    arr1.forEach(arr1Item => {\n        arr2.forEach(arr2Item => {\n            res.push([arr1Item, arr2Item]);\n        });\n    });\n\n    return res;\n};\n\n/**\n * A path config\n * @typedef {Object} PathConfig\n * @property {string} path - The path of this field\n * @property {Object} config - The configuration for this field\n * @property {Object} data - The fields data\n */\n\n/**\n * Get all field paths based on the field config and the current data\n * \n * @param {Object} fieldConfig the field configuration\n * @param {Object} data the current data\n * @returns {Array<Object>} an array of all paths\n */\nconst getFieldPaths = (fieldConfig, data, activeStages) => {\n    /**\n     * @type {Array<PathConfig>}\n     */\n    const paths = [];\n\n    const isActiveStage = (activeStages, renderPath) => {\n        let isActive = false;\n        Object.keys(activeStages).forEach(key => {\n            if (`${key}.${activeStages[key]}` === renderPath) isActive = true;\n        });\n        return isActive;\n    }\n\n    /**\n     * Recursively get all the paths with their configs and data objects\n     *\n     * @param {string} [path] - the config path\n     * @param {string} [renderPath] - the render path\n     * @return {void}\n     */\n    const getPathsForPath = (path = \"\", renderPath = \"\", pathType = \"\") => {\n        let thisConfigs = [path ? get(fieldConfig, path) : fieldConfig];\n        let thisKeys = [];\n        if (!Array.isArray(thisConfigs[0])) {\n            thisKeys = Object.keys(thisConfigs[0]);\n            thisConfigs = Object.values(thisConfigs[0]);\n        }\n        if (pathType === \"stage\" && !isActiveStage(activeStages, renderPath)) return;\n\n        thisConfigs.forEach((thisConfig, unionIndex) => {\n            const unionKey = typeof thisKeys[unionIndex] !== \"undefined\" ? thisKeys[unionIndex] : undefined;\n            if (Array.isArray(thisConfig)) {\n                thisConfig.forEach((item, index) => {\n                    const itemRenderPath = renderPath ? `${renderPath}.${item.id}` : item.id;\n                    const itemData = get(data, itemRenderPath);\n                    const unionData = get(data, renderPath);\n                    if ((unionKey && unionData && unionData.__typename === unionKey) || !unionKey) {\n                        paths.push({\n                            path: itemRenderPath,\n                            config: item,\n                            data: itemData,\n                        });\n                    }\n                    if (item.type === \"collection\") {\n                        const thisData = renderPath ? get(data, `${renderPath}.${item.id}`) : data[item.id];\n                        if (thisData && Array.isArray(thisData)) {\n                            thisData.forEach((colItem, colIndex) => {\n                                getPathsForPath(\n                                    `${path}[${index}].fields`, renderPath ?\n                                        `${renderPath}.${item.id}[${colIndex}]` : \n                                        `${item.id}[${colIndex}]`\n                                );\n                            });\n                        }\n                    } else if (item.type === \"group\" || item.type === \"fieldset\" || item.type === \"stage\") {\n                        getPathsForPath(`${path}[${index}].fields`, itemRenderPath, item.type);\n                    } else if (item.type === \"wizard\") {\n                        getPathsForPath(`${path}[${index}].stages`, itemRenderPath, \"wizard\");\n                    }\n                });\n            }\n        });\n    }\n\n    getPathsForPath();\n\n    return paths;\n};\n\n/**\n * Computes the fieldset parameters based on the given field configuration and fieldset parameter configuration.\n * Additionally it warns the developer if a field is missing or has the wrong type\n *\n * @param {Object} fieldConfig - The configuration of the fields.\n * @param {Object} paramConfig - The configuration of the fielkdset parameters.\n * @return {Object} The computed fieldset parameters.\n */\nconst computeFieldsetParams = (fieldConfig, paramConfig) => {\n    const params = {};\n    Object.keys(paramConfig).forEach(key => {\n        params[key] = typeof fieldConfig[key] !== \"undefined\" ? fieldConfig[key] : paramConfig[key].default;\n        if (typeof fieldConfig[key] === \"undefined\" && paramConfig[key].required) console.warn(`Param \"${key}\" is required but is missing in field configs!`);\n        if (typeof fieldConfig[key] !== \"undefined\" && typeof fieldConfig[key] !== paramConfig[key].type) console.warn(`Param \"${key}\" is not of type \"${paramConfig[key].type}\"!`);\n    });\n    return params;\n};\n\n/**\n * Parse the configuration using all the available data\n * \n * @param {Object | Array<object> | function} config the dynamic form config\n * @param {Object} data the current data\n * @param {Object} asyncData all the loaded async data\n * @param {Object} interfaceState all the interface state\n * @param {Array<object>} modifiedConfigs config which was modified on runtime by user input\n * @param {Object} fieldsets fieldsets which contain config and render for multiple fields\n * @returns {Array<object>} the parsed config\n */\nconst parseConfig = (config, data, asyncData, interfaceState, modifiedConfigs, fieldsets) => {\n    let parsedConfig = typeof config.fields === \"function\" ? config.fields(data, asyncData, interfaceState) : \n        typeof config === \"function\" ? config(data, asyncData, interfaceState) : \n        Array.isArray(config) ? config : \n        [];\n\n    const parseConfigItem = configItem => {\n        if (typeof configItem === \"string\" && config.fieldConfigs && typeof config.fieldConfigs[configItem] === \"function\") {\n            return config.fieldConfigs[configItem](data, asyncData, interfaceState);\n        } else if (typeof configItem === \"object\" && config.fieldConfigs && typeof config.fieldConfigs[configItem.type] === \"function\") {\n            const thisParsedConfig = config.fieldConfigs[configItem.type](data, asyncData, interfaceState);\n            return Object.assign({}, thisParsedConfig, configItem, { type: thisParsedConfig.type });\n        } else if (typeof configItem === \"object\" && fieldsets[configItem.type]) {\n            return {\n                id: configItem.id,\n                type: \"fieldset\",\n                fieldset: configItem.type,\n                fields: fieldsets[configItem.type].config({data, asyncData, interfaceState, params: computeFieldsetParams(configItem.params || {}, fieldsets[configItem.type].params)}),\n                params: configItem.params\n            };\n        } else if (typeof configItem === \"function\") {\n            return configItem(data, asyncData, interfaceState);\n        }\n        return configItem;\n    };\n\n    parsedConfig = parsedConfig.map(configItem => {\n        if (typeof configItem === \"object\" && (configItem.type === \"group\" || configItem.type === \"collection\" || configItem.type === \"fieldset\") && Array.isArray(configItem.fields)) {\n            configItem.fields = configItem.fields.map(field => parseConfigItem(field));\n        }\n        if (typeof configItem === \"object\" && configItem.type === \"wizard\" && Array.isArray(configItem.stages)) {\n            configItem.stages = configItem.stages.map(stage => parseConfigItem(stage));\n        }\n        return parseConfigItem(configItem);\n    });\n\n    modifiedConfigs.forEach(modifiedConfig => {\n        const fields = get(parsedConfig, modifiedConfig.path);\n        if (Array.isArray(fields)) {\n            if (modifiedConfig.action === \"add\") fields.push(modifiedConfig.fields(data, asyncData));\n            if (modifiedConfig.action === \"remove\") {\n                const field = modifiedConfig.fields(data, asyncData);\n                const index = findIndex(fields, { id: field.id });\n                if (index > -1) fields.splice(index, 1);\n            }\n            set(parsedConfig, modifiedConfig.path, fields);\n        }\n    });\n\n    return parsedConfig;\n};\n\nconst latestOptionsRequestIDsPerField = {}; // Used to prevent race conditions in options loaders\nlet pendingAsyncValidations; // Used to prevent race conditions with async validations\n\nlet lastOnChange = 0; // Used to throttle onChange validations\nlet timeoutRef; // Timeout ref used to throttle onChange validations\n\nlet lastOnChangeData; // Used to prevent unnessesary onChange callbacks\n\nconst chosenPlaceholders = {}; \n\n/**\n * This is the form component used in Stages. You can use it for individual steps in a wizard\n * or on it's own for one stage forms.\n * \n * @param {Object} component properties \n * @returns {React.ReactElement}\n */\nconst Form = ({\n    config,\n    data,\n    render,\n    renderFields,\n    fields,\n    onChange,\n    isVisible,\n    isDisabled,\n    id,\n    onValidation,\n    parentRunValidation,\n    validateOn,\n    throttleWait,\n    customEvents,\n    enableUndo,\n    undoMaxDepth,\n    customRuleHandlers,\n    autoSave,\n    typeValidations,\n    fieldsets,\n    initialInterfaceState,\n    hashSeparator,\n}) => {\n    const mounted = useRef(false);\n\n    // First we need to merge interfaceData with form data, whithout muting form data:\n    const [interfaceState, setInterfaceState] = useState(initialInterfaceState);\n    const alldata = Object.assign({}, data);\n    merge(alldata, interfaceState);\n\n    // Now we can setup all state:\n    const [uniqId] = useState(`form-${id || \"noid\"}-${+ new Date()}`);\n    const [isDirty, setIsDirty] = useState(false);\n    const [dirtyFields, setDirtyFields] = useState({});\n    const [initialData, setInitialData] = useState(false);\n    const [undoData, setUndoData] = useState([]);\n    const [activeUndoIndex, setActiveUndoIndex] = useState(0);\n    const [runValidation, setRunValidation] = useState(false);\n    const [dataLoaded, setDataLoaded] = useState(false);\n    const [optionsLoaded, setOptionsLoaded] = useState({});\n    const [optionsCache, setOptionsCache] = useState({});\n    const [asyncData, setAsyncData] = useState();\n    const [errors, setErrors] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [focusedField, setFocusedField] = useState(\"\");\n    const [lastFocusedField, setLastFocusedField] = useState(\"\");\n    const [modifiedConfigs, setModifiedConfigs] = useState([]);\n    const [activeStages, setActiveStages] = useState({});\n\n    // Lastly, we craete the actual objects we will work with:\n    const parsedFieldConfig = parseConfig(config, alldata, asyncData, interfaceState, modifiedConfigs, fieldsets);\n    const fieldPaths = getFieldPaths(parsedFieldConfig, alldata, activeStages);\n\n    // As we have functions which can be triggered from outside and do state updates, we need to check if the component is still mounted!\n    useEffect(() => {\n        mounted.current = true;\n        return () => {\n            mounted.current = false;\n        };\n    }, []);\n\n    // Set active stages on init and whenever the config changes (and stage isn't set yet):\n    useEffect(() => {\n        // Set active wizard stages:\n        const hash = typeof window !== \"undefined\" ? window.location.hash.substring(2) : \"\";\n        const hashParts = hash.split(hashSeparator || \":\");\n        const newActiveStages = {...activeStages};\n        hashParts.forEach(hashPart => {\n            const partSplit = hashPart.split(\".\");\n            const partPath = partSplit.slice(0, -1).join(\".\");\n            const partStage = partSplit[partSplit.length - 1];\n            if (partPath && partStage) newActiveStages[partPath] = partStage;\n        });\n        fieldPaths.forEach(fieldPath => {\n            if (fieldPath.config.type === \"wizard\" && (!newActiveStages[fieldPath.path] || (newActiveStages[fieldPath.path] && !find(fieldPath.config.stages, { id: newActiveStages[fieldPath.path] })))) {\n                newActiveStages[fieldPath.path] = fieldPath.config.stages[0].id;\n            }\n        });\n\n        if (JSON.stringify(activeStages) !== JSON.stringify(newActiveStages)) setActiveStages(newActiveStages);\n    }, [config]);\n\n    // Checks if the component is mounted, to prevent memory leaks for all callbacks from outside\n    const isMounted = () => (mounted && mounted.current === true);\n\n    // Save the initial data so we can compare it to the current data so we can decide if a form is dirty:\n    useEffect(() => {\n        if (data && !initialData) {\n            // @ts-ignore\n            if (isDebugging()) window.stagesLogging(\"Set initial data\", uniqId);\n\n            // Scan through the fieldPaths to find fields with default data:\n            let newErrors;\n            fieldPaths.forEach(fieldPath => {\n                if (typeof fieldPath.config.defaultValue !== \"undefined\") {\n                    const originalData = get(data, fieldPath.path);\n                    if (typeof originalData === \"undefined\") {\n                        const defaultValue = typeof fieldPath.config.defaultValue === \"function\" ? fieldPath.config.defaultValue(data) : fieldPath.config.defaultValue;\n                        set(data, fieldPath.path, defaultValue);\n                        set(alldata, fieldPath.path, defaultValue);\n                    }\n                }\n                // And trigger validation of fields with validate on init:\n                if (\n                    (Array.isArray(fieldPath.config.validateOn) && fieldPath.config.validateOn.indexOf(\"init\") > -1) || \n                    (Array.isArray(validateOn) && validateOn.indexOf(\"init\") > -1)\n                ) {\n                    const fieldErrors = validateField(fieldPath.path, \"init\", data, errors);\n                    newErrors = Object.assign({}, errors, fieldErrors);\n                }\n                if (newErrors) setErrors(newErrors);\n            });\n\n            const stringifiedData = stringify(data);\n            setInitialData(JSON.parse(stringifiedData));\n\n            let savedData;\n\n            // If autosave is enabled, read the data and trigger an onChange with it:\n            if (autoSave === \"local\" || autoSave === \"session\" || (typeof autoSave === \"object\" && (autoSave.type === \"local\" || autoSave.type === \"session\"))) {\n                savedData = getDataFromStorage(id, typeof autoSave === \"object\" ? autoSave.type : autoSave);\n            } else if (id && typeof autoSave === \"object\" && autoSave.type === \"custom\" && typeof autoSave.get === \"function\") {\n                savedData = autoSave.get(id);\n            }\n\n            if (savedData) {\n                if (Object.keys(savedData).length > 0) {\n                    setTimeout(() => {\n                        setIsDirty(!!savedData.isDirty);\n                        setDirtyFields(typeof savedData.dirtyFields === \"object\" ? savedData.dirtyFields : {});\n                        limitedOnChange(savedData.data, validationErrors(false, savedData.data), id);\n                    }, 0);   \n                }\n            }\n        }\n    }, [data]);\n\n    /*\n        If there is a logging function registered on the window (Stages browser extension), send data to it:\n    */\n    useEffect(() => {\n        if (isDebugging()) {\n            let savedData;\n            if (autoSave === \"local\" || autoSave === \"session\" || (typeof autoSave === \"object\" && (autoSave.type === \"local\" || autoSave.type === \"session\"))) {\n                savedData = getDataFromStorage(id, typeof autoSave === \"object\" ? autoSave.type : autoSave);\n            } else if (id && typeof autoSave === \"object\" && autoSave.type === \"custom\" && typeof autoSave.get === \"function\") {\n                savedData = autoSave.get(id);\n            } else {\n                savedData = {}\n            }\n            // @ts-ignore\n            window.stagesLogging({\n                id: uniqId,\n                data,\n                initialData,\n                interfaceState,\n                undoData,\n                asyncData,\n                errors,\n                fieldPaths,\n                isDirty,\n                focusedField,\n                lastFocusedField,\n                dirtyFields,\n                loading,\n                parsedFieldConfig,\n                savedData: savedData\n            });\n        }\n    }, [data, errors, isDirty, focusedField, lastFocusedField, dirtyFields, loading]);\n\n    /**\n     * Helper function to detect reserved field types\n     * \n     * @param {string} type string of the elemnts type\n     * @returns {boolean} true if the type is a reserved type\n     */\n    const isReservedType = type => type === \"collection\" || type === \"subform\" || type === \"group\" || type === \"fieldset\" || type === \"config\" || type === \"wizard\" || type === \"stage\";\n\n    /**\n     * Is a specific field valid based on current data?\n     * \n     * @param {string} fieldKey the path based key of the field\n     * @param {Object} field the config for this field\n     * @param {Object} fieldData data for this field\n     * @param {string|string[]} triggeringEvent the event which triggered this validation\n     * @returns {boolean} returns true if field value is valid\n     */\n    const isFieldValid = (fieldKey, field, fieldData, triggeringEvent) => {\n        if (!fields[field.type]) return true;\n        const thisData = get(fieldData, fieldKey);\n        const isValid = !isReservedType(field.type) && fields[field.type].isValid(thisData, field);\n        if (typeValidations[field.type] && typeof typeValidations[field.type].validation === \"function\" && !field.customValidation) {\n            // This field type has a global custom validation and no per field custom validation, \n            // so use the global custom validation!\n            return typeValidations[field.type].validation({\n                data: thisData,\n                allData: fieldData,\n                interfaceState,\n                fieldConfig: field,\n                isValid,\n                fieldHasFocus: !!(focusedField && focusedField === fieldKey),\n                fieldIsDirty: typeof dirtyFields[fieldKey] !== \"undefined\",\n                triggeringEvent\n            });\n        }\n        if ((typeof field.regexValidation === \"string\" || field.regexValidation instanceof RegExp) && !field.customValidation) {\n            let r;\n            if (typeof field.regexValidation === \"string\") {\n                try {\n                    r = new RegExp(field.regexValidation);\n                } catch(error) {\n                    // supplied Regex is invalid\n                }\n            } else {\n                r = field.regexValidation;\n            }\n            return isValid && (r.test(thisData) || !thisData);\n        }\n\n        if (!isReservedType(field.type) && typeof field.customValidation === \"function\") {\n            // As this is an async call, only call it if data has changed!\n            const customValidationResult = field.customValidation({\n                data: thisData,\n                allData: fieldData,\n                interfaceState,\n                fieldConfig: field,\n                isValid,\n                fieldHasFocus: !!(focusedField && focusedField === fieldKey),\n                fieldIsDirty: typeof dirtyFields[fieldKey] !== \"undefined\",\n                triggeringEvent\n            });\n            if (isPromise(customValidationResult)) {\n                (function(){\n                    // Add to pending async validations, with timestamp and fieldkey, so that we can prevent race conditions:\n                    const now = + new Date();\n                    pendingAsyncValidations = {...pendingAsyncValidations, [fieldKey]: now };\n\n                    customValidationResult.then((value) => {\n                        // If validation result is false, add this field to errors and remove the pending async entry.\n                        // If validation result is true, remove the pending async entry and any errors generated asynchronously.\n                        // If there is already a new pending async validation for this key, than throw away this result \n                        // and remove the pending entry.\n                        if (pendingAsyncValidations[fieldKey] !== now) return;\n                        if (value !== true) {\n                            delete pendingAsyncValidations[fieldKey];\n                            setErrors({...errors, [fieldKey]: {\n                                field: field\n                            }});\n                        } else {\n                            delete pendingAsyncValidations[fieldKey];\n                            setErrors({...errors});\n                        }\n                        pendingAsyncValidations = {...pendingAsyncValidations};\n                    });\n                })();\n            } else {\n                return customValidationResult;\n            }\n        }\n\n        return isValid;\n    };\n\n    /**\n     * This function is used to validate one single field. It returns the updated error and firstErrorField object\n     * \n     * @param {string} fieldKey the path based key of the field\n     * @param {string|string[]} triggeringEvent the event which triggered this validation\n     * @param {Object} validationData current data\n     * @param {Object} errors current error object\n     * @param {string} [firstErrorField] key of first error field\n     * @returns {object} an object containing the errors\n     */\n    const validateField = (fieldKey, triggeringEvent, validationData, errors, firstErrorField) => {\n        const field = find(fieldPaths, { path: fieldKey }).config;\n        // @ts-ignore\n        if (isDebugging() && triggeringEvent !== \"render\") window.stagesLogging(`Validate field \"${fieldKey}\"`, uniqId);\n\n        // Is the data entered valid, check with default field function and optionally with custom validation:\n        const fieldIsValid = isFieldValid(fieldKey, field, validationData, triggeringEvent);\n        const fieldValidationData = get(validationData, fieldKey);\n\n        if (errors[fieldKey]) delete errors[fieldKey];\n\n        // Regular non reserved type fields:\n        if (!isReservedType(field.type) && fieldIsValid !== true) {\n            if (!firstErrorField) firstErrorField = fieldKey;\n            errors[fieldKey] = {\n                value: fieldValidationData,\n                field,\n                errorCode: fieldIsValid !== false ? fieldIsValid : undefined\n            };\n        // Collections which are required (need to have at least one entry!):\n        } else if (\n            field.type === \"collection\" && \n            field.isRequired && \n            (\n                !fieldValidationData || \n                fieldValidationData.length === 0 || \n                (fieldValidationData.length === 1 && \n                Object.keys(fieldValidationData[0]).length === 0)\n            )\n        ) {\n            if (!firstErrorField) firstErrorField = fieldKey;\n            errors[fieldKey] = {\n                value: fieldValidationData,\n                field\n            };\n        // Collections which are not required will only be checked if data has been added:\n        } else if (field.type === \"collection\") {\n            if (Array.isArray(field.fields)) {\n                field.fields.forEach(subField => {\n                    fieldValidationData && fieldValidationData.forEach((dataEntry, index) => {\n                        const arrayFieldPath = `${fieldKey}[${index}].${subField.id}`;\n\n                        // Don't check fields if the collection isn't required and the object is empty:\n                        if (!field.isRequired && (!dataEntry || Object.keys(dataEntry).length === 0)) return;\n\n                        // Is the data entered valid, check with default field function and optionally with custom validation:\n                        const fieldIsValid = isFieldValid(subField, arrayFieldPath, dataEntry, triggeringEvent);\n\n                        if (fields[subField.type] && fieldIsValid !== true) {\n                            errors[fieldKey] = {\n                                value: fieldValidationData,\n                                subField,\n                                errorCode: fieldIsValid !== false ? fieldIsValid : undefined\n                            };\n                        } else if (fields[subField.type] && subField.isUnique) {\n                            // Check if field is unique in collection:\n                            let collectionData = get(validationData, fieldKey, [])\n                                .filter(item => typeof item[subField.id] !== \"undefined\")\n                                .map(item => item[subField.id]);\n                            \n                            const uniqCollectionData = [...new Set(collectionData)];\n\n                            if (uniqCollectionData.length !== collectionData.length) {\n                                errors[fieldKey] = {\n                                    value: fieldValidationData,\n                                    subField,\n                                    errorCode: \"notUnique\"\n                                };\n                            }\n                        }\n                    });\n                });\n            } else {\n                // This is a union type collection, so we need to get the validation config inside the types object:\n                fieldValidationData && fieldValidationData.forEach((dataEntry, index) => {\n                    // Don't check fields if the collection isn't required and the object is empty:\n                    if (!field.isRequired && (!dataEntry || Object.keys(dataEntry).length === 0)) return;\n\n                    if (field.fields[dataEntry.__typename]) {\n                        const subFields = field.fields[dataEntry.__typename];\n                        subFields.forEach(subField => {\n                            const arrayFieldPath = `${fieldKey}[${index}].${subField.id}`;\n\n                            // Is the data entered valid, check with default field function and optionally with custom validation:\n                            const fieldIsValid = isFieldValid(subField, arrayFieldPath, dataEntry, triggeringEvent);\n\n                            if (fields[subField.type] && fieldIsValid !== true) {\n                                errors[fieldKey] = {\n                                    value: fieldValidationData,\n                                    subField,\n                                    errorCode: fieldIsValid !== false ? fieldIsValid : undefined\n                                };\n                            }\n                        });\n                    }\n                });\n            }\n        }\n\n        // Check if data is unique if that's a requirement:\n        if (field.type === \"collection\" && field.uniqEntries && fieldValidationData) {\n            // Add error if collection entries are not unique!\n            if (uniqWith(fieldValidationData, (arrVal, othVal) => stringify(arrVal) === stringify(othVal)).length !== fieldValidationData.length) {\n                errors[fieldKey] = {\n                    value: fieldValidationData,\n                    field\n                };\n            }\n        }\n\n        // If the collection has rules set, check them against the data:\n        if (field.type === \"collection\" && field.rules && typeof field.rules === \"object\" && fieldValidationData) {\n            Object.keys(field.rules).forEach(ruleField => {\n                const rules = field.rules[ruleField];\n                Object.keys(rules).forEach((value) => {\n                    const valueRules = rules[value]; // An object of rules for this field/value combo\n                    \n                    // Convert fields and values to array, even if they are a primitive value:\n                    const ruleFields = ruleField.indexOf(\",\") > -1 ? ruleField.split(\",\") : [ruleField];\n                    const values = value.indexOf(\",\") > -1 ? value.split(\",\") : [value];\n                    const fieldValueCombos = getCombosFromTwoArrays(ruleFields, values);\n\n                    let ruleConformsToData = true;\n\n                    /*\n                        For rule: \"position\": { \"goalkeeper\": { maxCount: 1 } }\n\n                        ruleFields: [\"position\"]\n                        values: [\"goalkeeper\"] or [] (for calculation on a field)\n                        valueRules: { maxCount: 1 }\n                        fieldValidationData: collection data array -> [{}, {}, ...]\n\n                        Multiple fields or values can be added, by comma separating them like this: \"prename,lastname\"\n                        Fields can use dot syntax, for nested properties: \"coords.lat\"\n                    */\n\n                    // max occurence of value, example: \"position\": { \"goalkeeper\": { maxCount: 1, errorCode: \"goalkeeperOne\" } }\n                    if (valueRules.maxCount && typeof valueRules.maxCount === \"number\") {\n                        fieldValueCombos.forEach(fieldValueCombo => {\n                            let count = 0;\n                            fieldValidationData.forEach(d => get(d, fieldValueCombo[0]) === fieldValueCombo[1] ? count++ : undefined);\n                            if (count > valueRules.maxCount) ruleConformsToData = false;\n                        });\n                    }\n\n                    // min occurence of value, example: \"position\": { \"defender\": { minCount: 3, errorCode: \"defenderMiminum\" } }\n                    if (valueRules.minCount && typeof valueRules.minCount === \"number\") {\n                        fieldValueCombos.forEach(fieldValueCombo => {\n                            let count = 0;\n                            fieldValidationData.forEach(d => get(d, fieldValueCombo[0]) === fieldValueCombo[1] ? count++ : undefined);\n                            if (count < valueRules.minCount) ruleConformsToData = false;\n                        });\n                    }\n\n                    // exact occurence of value, example: \"position\": { \"defender\": { exactCount: 3 } }\n                    if (valueRules.exactCount && typeof valueRules.exactCount === \"number\") {\n                        fieldValueCombos.forEach(fieldValueCombo => {\n                            let count = 0;\n                            fieldValidationData.forEach(d => get(d, fieldValueCombo[0]) === fieldValueCombo[1] ? count++ : undefined);\n                            if (count !== valueRules.exactCount) ruleConformsToData = false;\n                        });\n                    }\n\n                    // same occurence of value as another field, example: \"position\": { \"defender\": { sameCountAs: \"midfield\" } }\n                    if (valueRules.sameCountAs && typeof valueRules.sameCountAs === \"string\") {\n                        fieldValueCombos.forEach(fieldValueCombo => {\n                            let count = 0;\n                            let otherValueCount = 0;\n                            fieldValidationData.forEach(d => {\n                                if (get(d, fieldValueCombo[0]) === fieldValueCombo[1]) count++;\n                                if (get(d, fieldValueCombo[0]) === valueRules.sameCountAs) otherValueCount++;\n                            });\n                            if (count !== otherValueCount) ruleConformsToData = false;\n                        });\n                    }\n\n                    // same occurence of value as another field, example: \"position\": { \"defender\": { differentCountAs: \"midfield\" } }\n                    if (valueRules.differentCountAs && typeof valueRules.differentCountAs === \"string\") {\n                        fieldValueCombos.forEach(fieldValueCombo => {\n                            let count = 0;\n                            let otherValueCount = 0;\n                            fieldValidationData.forEach(d => {\n                                if (get(d, fieldValueCombo[0]) === fieldValueCombo[1]) count++;\n                                if (get(d, fieldValueCombo[0]) === valueRules.differentCountAs) otherValueCount++;\n                            });\n                            if (count === otherValueCount) ruleConformsToData = false;\n                        });\n                    }\n\n                    // same sum as, example: \"spending\": { \"\": { sameSumAs: \"income\" } }\n                    if (\n                        (valueRules.sameSumAs && typeof valueRules.sameSumAs === \"string\") ||\n                        (valueRules.differentSumAs && typeof valueRules.differentSumAs === \"string\") || \n                        (valueRules.biggerSumAs && typeof valueRules.biggerSumAs === \"string\") ||\n                        (valueRules.smallerSumAs && typeof valueRules.smallerSumAs === \"string\")\n                    ) {\n                        fieldValueCombos.forEach(fieldValueCombo => {\n                            let sum1 = 0;\n                            let sum2 = 0;\n                            fieldValidationData.forEach(d => {\n                                const thisValue1 = Number(get(d, fieldValueCombo[0]));\n                                const thisValue2 = Number(get(d, valueRules.sameSumAs || valueRules.differentSumAs || valueRules.biggerSumAs || valueRules.smallerSumAs));\n                                if (!isNaN(thisValue1)) sum1 = sum1 + thisValue1;\n                                if (!isNaN(thisValue2)) sum2 = sum2 + thisValue2;\n                            });\n                            if (valueRules.sameSumAs && sum1 !== sum2) ruleConformsToData = false;\n                            if (valueRules.differentSumAs && sum1 === sum2) ruleConformsToData = false;\n                            if (valueRules.biggerSumAs && sum1 <= sum2) ruleConformsToData = false;\n                            if (valueRules.smallerSumAs && sum1 >= sum2) ruleConformsToData = false;\n                        });\n                    }\n\n                    // Check if multi field value combinations are unique, example: \"prename,lastname\": { \"\": { isUnique: true } }\n                    if (valueRules.isUnique && ruleFields.length > 0) {\n                        const valueCombos = [];\n                        let duplicateFound = false;\n                        fieldValidationData.forEach(d => {\n                            const combo = ruleFields.map(f => get(d, f));\n                            valueCombos.forEach(c => {\n                                if (isEqual(combo, c)) duplicateFound = true;\n                            });\n                            valueCombos.push(combo);\n                        });\n                        if (duplicateFound) ruleConformsToData = false;\n                    }\n\n                    // Disallow certain values if something is set, example: \"gender\": { \"ms\": { disallow: \"mr\" } }\n                    if (valueRules.disallow) {\n                        fieldValueCombos.forEach(fieldValueCombo => {\n                            let bannedValueFound = false;\n                            let searchValueFound = false;\n                            fieldValidationData.forEach(d => {\n                                if (get(d, fieldValueCombo[0]) === fieldValueCombo[1]) searchValueFound = true;\n                                if (Array.isArray(valueRules.disallow)) {\n                                    valueRules.disallow.forEach(str => {\n                                        if (get(d, fieldValueCombo[0]) === str) bannedValueFound = true;\n                                    });\n                                } else {\n                                    if (get(d, fieldValueCombo[0]) === valueRules.disallow) bannedValueFound = true;\n                                }\n                            });\n                            if (searchValueFound && bannedValueFound) ruleConformsToData = false;\n                        });\n                    }\n\n                    // Require certain values if something is set, example: \"gender\": { \"ms\": { require: \"mr\" } }\n                    if (valueRules.disallow) {\n                        fieldValueCombos.forEach(fieldValueCombo => {\n                            let requiredValueFound = false;\n                            let searchValueFound = false;\n                            fieldValidationData.forEach(d => {\n                                if (get(d, fieldValueCombo[0]) === fieldValueCombo[1]) searchValueFound = true;\n                                if (Array.isArray(valueRules.disallow)) {\n                                    valueRules.disallow.forEach(str => {\n                                        if (get(d, fieldValueCombo[0]) === str) requiredValueFound = true;\n                                    });\n                                } else {\n                                    if (get(d, fieldValueCombo[0]) === valueRules.disallow) requiredValueFound = true;\n                                }\n                            });\n                            if (searchValueFound && !requiredValueFound) ruleConformsToData = false;\n                        });\n                    }\n\n                    // Check all custom rule handlers\n                    if (ruleConformsToData && typeof customRuleHandlers === \"object\") {\n                        Object.keys(customRuleHandlers).forEach(customRule => {\n                            if (typeof valueRules[customRule] !== \"undefined\" && typeof customRuleHandlers[customRule] === \"function\") {\n                                const result = customRuleHandlers[customRule]({ fieldValueCombos, fieldValidationData, valueRules, get });\n                                if (!result) ruleConformsToData = false;\n                            }\n                        });\n                    }\n\n                    if (!ruleConformsToData) {\n                        errors[fieldKey] = {\n                            value: fieldValidationData,\n                            field,\n                            errorCode: valueRules.errorCode || \"invalidRule\"\n                        };\n                    }\n                });\n            });\n        }\n        return {\n            errors,\n            firstErrorField\n        };\n    };\n\n    /**\n     * This function checks for all validation errors, based on each field types validation method\n     * and the fields config.\n     * \n     * @param {boolean} [isUserAction] is this a user action or called internally (from the wizard)?\n     * @param {Object} [validationData] the current data being validated\n     * @returns {object} an object containing the errors\n     */\n    const validationErrors = (isUserAction, validationData, rootPath = \"\") => {\n        let errors = {};\n        let firstErrorField;\n\n        if (!validationData) validationData = alldata;\n\n        fieldPaths.forEach(fieldPath => {\n            if (rootPath === \"\" || fieldPath.path.startsWith(rootPath)) {\n                if (!fields[fieldPath.config.type] && !isReservedType(fieldPath.config.type)) return;\n                const result = validateField(fieldPath.path, rootPath !== \"\" ? \"render\" : \"action\", validationData, errors, firstErrorField);\n                errors = result.errors;\n                firstErrorField = result.firstErrorField;\n            }\n        });\n\n        // Jump to the first field which has an error:\n        if (firstErrorField && isVisible && isUserAction) {\n            const element = document.getElementById(firstErrorField);\n            if (element && !isElementInViewport(element)) element.scrollIntoView();\n        }\n\n        return errors;\n    };\n\n    /**\n     * This function can be used to gather form errors without populating the error object,\n     * which can be useful in certain cases where you don't want to display errors on the fields\n     * but for example disabling submission of the form.\n     * \n     * @returns {object} an object containing the errors\n     */\n    const silentlyGetValidationErrors = () => {\n        return validationErrors(false);\n    };\n\n    // To make sure that subforms are being validated, we have to run validation each time validation is being \n    // run on the parent component:\n    useEffect(() => {\n        if (typeof onValidation === \"function\" && parentRunValidation) {\n            // @ts-ignore\n            if (isDebugging()) window.stagesLogging(`Get errors on validation`, uniqId);\n            let errors = validationErrors(true);\n            setErrors(errors);\n            onValidation(errors);\n        }\n    }, [onValidation]);\n\n    /**\n     * This is the callback which sub forms call to bubble up validation errors from within the subform.\n     * \n     * @param {string} subId the id of the sub form\n     * @param {Object} subErrors the errors from the sub form\n     */\n    const handleSubValidation = (subId, subErrors) => {\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Get sub form errors for sub id \"${subId}\"`, uniqId);\n        validationErrors(true);\n        if (subErrors && Object.keys(subErrors).length > 0) {\n            errors[subId] = subErrors;\n        }\n    };\n\n    /**\n     * Helper state function so we always get the latest options cache when updating from callback\n     * \n     * @param {string} key the field path key\n     * @param {Array<object>} options all the cached options\n     */\n    const updateOptionsCache = (key, options) => {\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Update options cache for \"${key}\"`, uniqId);\n        setOptionsCache(latestCache => {\n            return Object.assign({}, latestCache, {[key]: options});\n        });\n    };\n\n    /**\n     * Helper state function so we always get the latest options loaded when updating from callback\n     * \n     * @param {string} key the field path key\n     * @param {Array<object>} options the new options which should be cached\n     */\n    const updateOptionsLoaded = (key, options) => {\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Update options loaded for \"${key}\"`, uniqId);\n        setOptionsLoaded(latestCache => {\n            return Object.assign({}, latestCache, {[key]: options});\n        });\n    };\n\n    /**\n     * Create the dynamic options for a specific field\n     * \n     * @param {string} fieldKey the field path key\n     * @param {Object} optionsConfig configuration for the dynamicly loaded options\n     * @param {Object} updatedData the latest form data\n     */\n    const createDynamicOptions = async (fieldKey, optionsConfig, updatedData) => {\n        if (optionsConfig.loader && typeof optionsConfig.loader === \"function\") {\n            const cacheKeyValues = {};\n            let cacheKey;\n            let options;\n\n            // Variables used to prevent race conditions with the async options calls:\n            const newNr = typeof latestOptionsRequestIDsPerField[fieldKey] === \"number\" ? latestOptionsRequestIDsPerField[fieldKey] + 1 : 0;\n            let nrAfterAsyncCall = newNr;\n            latestOptionsRequestIDsPerField[fieldKey] = newNr;\n\n            // @ts-ignore\n            if (isDebugging()) window.stagesLogging(`Create dynamic options for field \"${fieldKey}\"`, uniqId);\n\n            // Handle caching of loaded options if enabled:\n            if (optionsConfig.enableCaching) {\n                optionsConfig.watchFields.forEach(f => {\n                    const fieldData = get(updatedData, f);\n                    if (fieldData) cacheKeyValues[f] = fieldData;\n                });\n                cacheKey = `${fieldKey}-${stringify(cacheKeyValues)}`;\n            }\n\n            // Load async data or use the cache:\n            if (optionsConfig.enableCaching && optionsCache[cacheKey]) {\n                options = optionsCache[cacheKey];\n            } else {\n                options = await optionsConfig.loader(updatedData, handleChange);\n                nrAfterAsyncCall = latestOptionsRequestIDsPerField[fieldKey];\n            }\n\n            if (optionsConfig.enableCaching) {\n                updateOptionsCache(cacheKey, options);\n            }\n\n            // Only update options if this is the latest option call for this field:\n            if (nrAfterAsyncCall === newNr) {\n                updateOptionsLoaded(fieldKey, options);\n                if (optionsConfig.onOptionsChange && typeof optionsConfig.onOptionsChange === \"function\") {\n                    optionsConfig.onOptionsChange(options, updatedData, handleChange);\n                }\n            }\n        }\n    };\n\n    /**\n     * This function removes interface data from the form data and packs it into the interface state\n     * \n     * @param {Object} thisData the current form data\n     * @returns {object} new data with all inteerface state removed\n     */\n    const removeInterfaceState = thisData => {\n        // 1. Use fieldPaths to remove data which shouldn't be exposed.\n        // 2. Put it into interFace state\n        // 3. Add it again when working with the data (once, right on top)\n\n        const interfaceState = {};\n        const newData = Object.assign({}, thisData);\n\n        fieldPaths.forEach(fieldPath => {\n            if (fieldPath.config.isInterfaceState) {\n                const pathData = get(thisData, fieldPath.path);\n                if (typeof pathData !== \"undefined\") {\n                    set(interfaceState, fieldPath.path, pathData);\n                    unset(newData, fieldPath.path);\n                }\n            }\n        });\n\n        setInterfaceState(interfaceState);\n\n        return newData;\n    };\n\n    /**\n     * Improve the on change handler so that only real changes are bubbled up!\n     * \n     * @param {Object} newData the latest form data\n     * @param {Object} errors all the form errors\n     * @param {string} id id of the form\n     * @param {string} [fieldKey] the field path key\n     */\n    const limitedOnChange = (newData, errors, id, fieldKey, forceChange = false) => {\n        let newLastOnChangeData;\n        try {\n            newLastOnChangeData = stringify({ newData, errors: Object.keys(errors), id, fieldKey, interfaceState });\n        } catch(error) {};\n        if (newLastOnChangeData !== lastOnChangeData || forceChange) {\n            onChange(removeInterfaceState(newData), errors, id, fieldKey, interfaceState, validationErrors(false, newData));\n            lastOnChangeData = newLastOnChangeData;\n        }\n    };\n\n    /**\n     * Form action handler for undo\n     */\n    const handleUndo = () => {\n        if (!isMounted()) return;\n        if (enableUndo && activeUndoIndex > 0) {\n            const newIndex = activeUndoIndex - 1;\n            const oldState = JSON.parse(undoData[newIndex]);\n\n            setActiveUndoIndex(newIndex);\n            setErrors(oldState.errors);\n            setIsDirty(oldState.isDirty);\n            setDirtyFields(oldState.dirtyFields);\n\n            limitedOnChange(oldState.data, oldState.errors, id);\n        }\n    };\n    \n    /**\n     * Form action handler for redo\n     */\n    const handleRedo = () => {\n        if (!isMounted()) return;\n        if (enableUndo && activeUndoIndex < undoData.length - 1) {\n            const newIndex = activeUndoIndex + 1;\n            const oldState = JSON.parse(undoData[newIndex]);\n\n            setActiveUndoIndex(newIndex);\n            setErrors(oldState.errors);\n            setIsDirty(oldState.isDirty);\n            setDirtyFields(oldState.dirtyFields);\n\n            limitedOnChange(oldState.data, oldState.errors, id);\n        }\n    };\n\n    /**\n     * Add new entry to the undo index\n     * @param {Object} newData the latest form data\n     */\n    const addNewUndoEntry = newData => {\n        if (enableUndo) {\n            const newUndoData = [...undoData];\n            newUndoData.length = activeUndoIndex + 1;\n            newUndoData.push(stringify({\n                data: newData,\n                isDirty,\n                dirtyFields,\n                errors\n            }));\n\n            if (newUndoData.length > undoMaxDepth) newUndoData.shift();\n\n            setUndoData(newUndoData);\n            setActiveUndoIndex(newUndoData.length - 1);\n        }\n    };\n\n    /*\n        Initialize collections if needed and run the validation (needed for\n        the wizard to find out which steps are valid).\n    */\n    useEffect(() => {\n        let newData = Object.assign({}, alldata);\n        \n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Is visible change to \"${isVisible ? \"visible\" : \"invisible\"}\"`, uniqId);\n\n        fieldPaths.forEach(fieldPath => {\n            const field = fieldPath.config;\n            let fieldData = get(newData, fieldPath.path);\n            if (field.type === \"collection\" && field.init) {\n                const minEntries = field.min ? Number(field.min) : 1;\n                // Init collections if needed (will add empty object so the row is rendered):\n                if (!fieldData || fieldData.length === 0) fieldData = [];\n                for (let i = fieldData.length; i < minEntries; i++) {\n                    if (typeof field.init === \"string\") {\n                        // Init union types with a specific type:\n                        if (typeof field.setInitialData === \"function\") {\n                            fieldData.push(field.setInitialData(fieldData, newData, field.init));\n                        } else {\n                            fieldData.push({ __typename: field.init });\n                        }\n                    } else {\n                        if (typeof field.setInitialData === \"function\") {\n                            fieldData.push(field.setInitialData(fieldData, newData));\n                        } else {\n                            fieldData.push({});\n                        }\n                    }\n                }\n                set(newData, fieldPath.path, fieldData);\n            }\n        });\n\n        newData = computeValues(newData);\n\n        if (typeof config.asyncDataLoader === \"function\" && isVisible && !dataLoaded) {\n            // Load async data if an asyncDataLoader has been provided:\n            (async () => {\n                setLoading(true);\n                const asyncData = await config.asyncDataLoader();\n                setAsyncData(asyncData);\n                setDataLoaded(true);\n                setLoading(false);\n            })();\n        }\n\n        if (isVisible) {\n            // Check if a field has dynamic options and needs to initialize them:\n            if (Array.isArray(fieldPaths)) {\n                fieldPaths.forEach(fieldPath => {\n                    if (fieldPath.config.dynamicOptions && fieldPath.config.dynamicOptions.events && fieldPath.config.dynamicOptions.events.indexOf(\"init\") > -1) {\n                        createDynamicOptions(fieldPath.path, fieldPath.config.dynamicOptions, newData);\n                    }\n                });\n            }\n            if (activeUndoIndex === 0 && undoData.length === 0) {\n                setUndoData([stringify({\n                    data: newData,\n                    isDirty,\n                    dirtyFields,\n                    errors\n                })]);\n            }\n        }\n\n        limitedOnChange(newData, validationErrors(), id); // will trigger validations even with no inits\n    }, [isVisible]);\n\n    /**\n     * This function finds all fields with computed values and computes them\n     * with the current data.\n     * \n     * @param {Object} data the current form data\n     * @returns {object} the newly computed form data\n     */\n    const computeValues = (data) => {\n        const newData = Object.assign({}, data);\n        fieldPaths.forEach(fieldPath => {\n            if (typeof fieldPath.config.computedValue === \"function\") {\n                const itemData = get(alldata, fieldPath.path.split(\".\").slice(0, -1).join(\".\"));\n                const computedValue = fieldPath.config.computedValue(data, itemData, interfaceState);\n                set(newData, fieldPath.path, computedValue);\n            }\n        });\n        return newData;\n    };\n\n    /**\n     * This function returns the field configuration for a specific field, given the key of that \n     * field (or keys for collection fields)\n     * \n     * @param {string} fieldKey the path key of the field\n     * @returns {object} the field configuration\n     */\n    const getConfigForField = fieldKey => {\n        return find(fieldPaths, { path: fieldKey }).config;\n    };\n\n    /**\n     * Returns an array of active custom events given a triggering event and event data.\n     *\n     * @param {string} triggeringEvent - the event that triggered the custom events\n     * @param {Object} eventData - the data passed to the event handler\n     * @returns {Array<string>} an array of active custom events\n     */\n    const getActiveCustomEvents = (triggeringEvent, eventData, fieldValue) => {\n        const activeCustomEvents = [];\n\n        if (typeof customEvents === \"object\") {\n            Object.keys(customEvents).forEach(key => {\n                if (typeof customEvents[key] === \"function\" && customEvents[key]({\n                    fieldValue,\n                    data: eventData,\n                    dirtyFields,\n                    optionsLoaded,\n                    asyncData,\n                    errors,\n                    focusedField,\n                    triggeringEvent\n                })) activeCustomEvents.push(key);\n            });\n        }\n\n        return activeCustomEvents;\n    };\n\n    /**\n     * Collapse arrays with only one element into a string\n     * \n     * @param {Array<string>} arr the array to process\n     * @returns {string|Array<string>} the first element of the array or the whole array\n     */\n    const arrayToStringIfOnlyOneEntry = arr => {\n        if (Array.isArray(arr) && arr.length === 1) return arr[0];\n        return arr;\n    };\n\n    /**\n     * Returns true if the field is a collection\n     * \n     * @param {string} path the path of the field\n     * @returns {boolean} true if the field is a collection\n     */\n    const isCollectionField = (path) => {\n        const pathSplit = path.split(\".\");\n        const secondLastEntry = pathSplit.at(-2);\n        const lastChar = secondLastEntry ? secondLastEntry.slice(-1) : \"\";\n        return lastChar === \"]\";\n    };\n\n    /**\n     * Returns the parent path of a given path.\n     *\n     * @param {string} path - The path to extract the parent path from.\n     * @return {string} The parent path of the given path.\n     */\n    const getParentPath = (path) => {\n        const pathParts = path.split(\".\");\n        pathParts.pop();\n        let newPath = pathParts.join(\".\");\n        const lastChar = newPath.slice(-1);\n        if (lastChar === \"]\") {\n            const lastIndex = newPath.lastIndexOf(\"[\");\n            newPath = newPath.substring(0, lastIndex);\n        }\n        return newPath;\n    };\n\n    /**\n     * This function is called on each fields onChange. It will trigger the forms onChange\n     * and run the validation on the new data (which is sent to the onChange, as well).\n     * \n     * @param {string} fieldKey field path key\n     * @param {any} value the new value for this field\n     * @param {Object} outsideData the outside data to be processed\n     * @param {boolean} syntheticCall true if this is a synthetic call\n     */\n    const handleChange = (fieldKey, value, outsideData, syntheticCall = false) => {\n        if (!isMounted()) return;\n\n        let throttleValidation = false;\n        let newErrors;\n        const timestamp = +new Date();\n        const fieldConfig = getConfigForField(fieldKey);\n\n        if (!syntheticCall) lastOnChange = timestamp;\n        \n        let newData = Object.assign({}, outsideData || alldata);\n        let newValue = typeof fieldConfig.filter === \"function\" ? fieldConfig.filter(value) : value; //Filter data if needed\n\n        if (fieldConfig.cast && typeof fieldConfig.cast.data === \"function\") newValue = fieldConfig.cast.data(newValue);\n        if (fieldConfig.cast && typeof fieldConfig.cast.data === \"string\") newValue = castValueStrType(newValue, fieldConfig.cast.data);\n        if (fieldConfig.cast && Array.isArray(fieldConfig.cast.data)) newValue = castValueStrType(newValue, fieldConfig.cast.data[0], true);\n\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Handle change for field \"${fieldKey}\"`, uniqId);\n\n        if (newValue) {\n            set(newData, fieldKey, newValue);\n        } else {\n            // Remove if false, to make sure isDirty is calculated correctly!\n            set(newData, fieldKey, undefined);\n        }\n\n        // Now run over all computed value fields to recalculate all dynamic data:\n        newData = computeValues(newData);\n\n        // prepare the params for the validateOnCallback:\n        const validateOnParams = {\n            data: get(newData, fieldKey),\n            fieldIsDirty: !!dirtyFields[fieldKey],\n            fieldConfig,\n            fieldHasFocus: !!(focusedField && focusedField === fieldKey)\n        };\n\n        if (!syntheticCall) {\n            if (lastOnChange === 0 || timestamp - lastOnChange < Number(throttleWait || 400)) {\n                if (\n                    (!fieldConfig.validateOn && Array.isArray(validateOn) && validateOn.indexOf('throttledChange') > -1) ||\n                    (fieldConfig.validateOn && Array.isArray(fieldConfig.validateOn) && fieldConfig.validateOn.indexOf('throttledChange') > -1) || \n                    (!fieldConfig.validateOn && typeof validateOn === \"function\" && validateOn(validateOnParams).indexOf('throttledChange') > -1) ||\n                    (fieldConfig.validateOn && typeof fieldConfig.validateOn === \"function\" && fieldConfig.validateOn(validateOnParams).indexOf('throttledChange') > -1)\n                ) {\n                    if (timeoutRef) clearTimeout(timeoutRef);\n                    timeoutRef = setTimeout(() => handleChange(fieldKey, value, outsideData, true), throttleWait || 400);\n                    throttleValidation = true;\n                }\n            }\n        }\n\n        // Are there any custom events active?\n        const activeCustomEvents = getActiveCustomEvents(\"change\", newData, newValue);\n\n        // Only validate if change or throttledChange or a custom event validation is enabled:\n        if (\n            (!fieldConfig.validateOn && Array.isArray(validateOn) && activeCustomEvents.some(r=> validateOn.indexOf(r) > -1)) ||\n            (fieldConfig.validateOn && Array.isArray(fieldConfig.validateOn) && activeCustomEvents.some(r=> fieldConfig.validateOn.indexOf(r) > -1))\n        ) {\n            const result = validateField(fieldKey, arrayToStringIfOnlyOneEntry(activeCustomEvents), newData, errors);\n            newErrors = Object.assign({}, errors, result.errors);\n            setErrors(newErrors);\n        } else if (\n            (!fieldConfig.validateOn && Array.isArray(validateOn) && validateOn.indexOf('change') > -1) ||\n            (fieldConfig.validateOn && Array.isArray(fieldConfig.validateOn) && fieldConfig.validateOn.indexOf('change') > -1) ||\n            (!fieldConfig.validateOn && Array.isArray(validateOn) && validateOn.indexOf('throttledChange') > -1 && !throttleValidation) ||\n            (fieldConfig.validateOn && Array.isArray(fieldConfig.validateOn) && fieldConfig.validateOn.indexOf('throttledChange') > -1 && !throttleValidation) || \n            (!fieldConfig.validateOn && typeof validateOn === \"function\" && validateOn(validateOnParams).indexOf('change') > -1) ||\n            (fieldConfig.validateOn && typeof fieldConfig.validateOn === \"function\" && fieldConfig.validateOn(validateOnParams).indexOf('change') > -1) ||\n            (!fieldConfig.validateOn && typeof validateOn === \"function\" && validateOn(validateOnParams).indexOf('throttledChange') > -1 && !throttleValidation) ||\n            (fieldConfig.validateOn && typeof fieldConfig.validateOn === \"function\" && fieldConfig.validateOn(validateOnParams).indexOf('throttledChange') > -1 && !throttleValidation)\n        ) {\n            const result = validateField(fieldKey, \"change\", newData, errors);\n            newErrors = Object.assign({}, errors, result.errors);\n            setErrors(newErrors);\n        }\n\n        // Set the isDirty flag and per field object:\n        if (initialData) {\n            if (!isEqual(get(newData, fieldKey), get(initialData, fieldKey))) {\n                dirtyFields[fieldKey] = {\n                    oldData: get(initialData, fieldKey),\n                    newData: get(newData, fieldKey)\n                };\n            } else if (typeof dirtyFields[fieldKey] !== \"undefined\") {\n                delete dirtyFields[fieldKey];\n            }\n            setIsDirty(Object.keys(dirtyFields).length > 0);\n            setDirtyFields(dirtyFields);\n        }\n\n        // If there are any fields to be cleared, do that now:\n        if (fieldConfig.clearFields && (Array.isArray(fieldConfig.clearFields) || typeof fieldConfig.clearFields === \"function\")) {\n            const newOptionsLoaded = Object.assign({}, optionsLoaded);\n            const fields = Array.isArray(fieldConfig.clearFields) ? fieldConfig.clearFields : fieldConfig.clearFields(newValue, newData, newErrors);\n            fields.forEach((field) => {\n                set(newData, field, undefined);\n                delete newOptionsLoaded[field];\n            });\n            setOptionsLoaded(newOptionsLoaded);\n        }\n\n        // Check if a field has dynamic options which have to be loaded:\n        if (Array.isArray(fieldPaths)) {\n            fieldPaths.forEach(fieldPath => {\n                if (\n                    fieldPath.config.dynamicOptions &&\n                    fieldPath.config.dynamicOptions.events &&\n                    fieldPath.config.dynamicOptions.events.indexOf('change') > -1 &&\n                    fieldPath.config.dynamicOptions.watchFields &&\n                    fieldPath.config.dynamicOptions.watchFields.indexOf(fieldKey) > -1 &&\n                    (!fieldConfig.dynamicOptions ||\n                    (fieldConfig.dynamicOptions &&\n                        optionsLoaded[fieldPath.path] &&\n                        optionsLoaded[fieldPath.path].indexOf(get(newData, fieldKey)) > -1) ||\n                    !optionsLoaded[fieldPath.path])\n                ) {\n                    createDynamicOptions(fieldPath.path, fieldPath.config.dynamicOptions, newData);\n                }\n            });\n        }\n\n        // Do we have to sort a collection?\n        if (isCollectionField(fieldKey)) {\n            const collectionKey = getParentPath(fieldKey);\n            const collectionConfig = getConfigForField(collectionKey);\n            if (collectionConfig.sort && collectionConfig.sort.by && collectionConfig.sort.by.indexOf(fieldConfig.id) > -1) {\n                let collectionData = get(newData, collectionKey, []);\n                collectionData = sortBy(collectionData, collectionConfig.sort.by);\n                if (collectionConfig.sort.dir === \"desc\") collectionData = collectionData.reverse();\n                set(newData, collectionKey, collectionData);\n            }\n        }\n\n        limitedOnChange(newData, validationErrors(false, newData), id, fieldKey);\n    };\n\n    /*\n        This function is called on each fields onFocus. It is currently used \n        to track which field has focus and what the last field in focus was.\n    */\n    /**\n     * This function is called on each fields onFocus. It is currently used \n     * to track which field has focus and what the last field in focus was.\n     * \n     * @param {string} fieldKey path key of the field\n     */\n    const handleFocus = (fieldKey) => {\n        if (!isMounted()) return;\n\n        const fieldConfig = getConfigForField(fieldKey);\n        const newData = Object.assign({}, alldata);\n        const value = get(newData, fieldKey);\n\n        setFocusedField(fieldKey);\n        setLastFocusedField(fieldKey);\n\n        // prepare the params for the validateOnCallback:\n        const validateOnParams = {\n            data: value,\n            fieldIsDirty: !!dirtyFields[fieldKey],\n            fieldConfig,\n            fieldHasFocus: !!(focusedField && focusedField === fieldKey)\n        };\n\n        // Are there any custom events active?\n        const activeCustomEvents = getActiveCustomEvents(\"focus\", newData, value);\n\n        // Only validate if blur validation or a custom event is enabled:\n        if (\n            (!fieldConfig.validateOn && Array.isArray(validateOn) && activeCustomEvents.some(r=> validateOn.indexOf(r) > -1)) ||\n            (fieldConfig.validateOn && Array.isArray(fieldConfig.validateOn) && activeCustomEvents.some(r=> fieldConfig.validateOn.indexOf(r) > -1))\n        ) {\n            const result = validateField(fieldKey, arrayToStringIfOnlyOneEntry(activeCustomEvents), newData, errors);\n            setErrors(Object.assign({}, errors, result.errors));\n            limitedOnChange(newData, result.errors, id, fieldKey);\n        } else if (\n            (!fieldConfig.validateOn && Array.isArray(validateOn) && validateOn.indexOf(\"focus\") > -1) || \n            (fieldConfig.validateOn && Array.isArray(fieldConfig.validateOn) && fieldConfig.validateOn.indexOf(\"focus\") > -1) || \n            (!fieldConfig.validateOn && typeof validateOn === \"function\" && validateOn(validateOnParams).indexOf(\"focus\") > -1) || \n            (fieldConfig.validateOn && typeof fieldConfig.validateOn === \"function\" && fieldConfig.validateOn(validateOnParams).indexOf(\"focus\") > -1)\n        ) {\n            const result = validateField(fieldKey, \"focus\", newData, errors);\n            setErrors(Object.assign({}, errors, result.errors));\n            limitedOnChange(newData, result.errors, id, fieldKey);\n        }\n    };\n\n    /**\n     * This function is called on each fields onBlur. It only runs validation \n     * if validation is enabled for blur events.\n     * \n     * @param {string} fieldKey path key of the field\n     */\n    const handleBlur = (fieldKey) => {\n        if (!isMounted()) return;\n\n        setFocusedField(\"\");\n        const fieldConfig = getConfigForField(fieldKey);\n        const newData = Object.assign({}, alldata);\n        const autoSavedData = Object.assign({}, alldata);\n        let value = get(newData, fieldKey);\n\n        lastOnChange = 0; // Reset the throttled change, so it starts from fresh again\n\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Handle blur for field \"${fieldKey}\"`, uniqId);\n\n        // Run field cleanUp function if one is set:\n        if (fieldConfig.cleanUp && typeof fieldConfig.cleanUp === \"function\" && typeof value !== \"undefined\") {\n            value = fieldConfig.cleanUp(value);\n            set(newData, fieldKey, value);\n            handleChange(fieldKey, value, newData, true); // As this is a change, we need to run the onChange handler!\n        }\n\n        // If precision is set, parse the value accordingly:\n        if (typeof fieldConfig.precision === \"number\") {\n            set(newData, fieldKey, Number(value).toFixed(fieldConfig.precision));\n            limitedOnChange(newData, errors, id, fieldKey);\n        }\n\n        // prepare the params for the validateOnCallback:\n        const validateOnParams = {\n            data: value,\n            fieldIsDirty: !!dirtyFields[fieldKey],\n            fieldConfig,\n            fieldHasFocus: !!(focusedField && focusedField === fieldKey)\n        };\n\n        // Are there any custom events active?\n        const activeCustomEvents = getActiveCustomEvents(\"blur\", newData, value);\n\n        // Only validate if blur validation or a custom event is enabled:\n        if (\n            (!fieldConfig.validateOn && Array.isArray(validateOn) && activeCustomEvents.some(r=> validateOn.indexOf(r) > -1)) ||\n            (fieldConfig.validateOn && Array.isArray(fieldConfig.validateOn) && activeCustomEvents.some(r=> fieldConfig.validateOn.indexOf(r) > -1))\n        ) {\n            const result = validateField(fieldKey, arrayToStringIfOnlyOneEntry(activeCustomEvents), newData, errors);\n            setErrors(Object.assign({}, errors, result.errors));\n            limitedOnChange(newData, result.errors, id, fieldKey);\n        } else if (\n            (!fieldConfig.validateOn && Array.isArray(validateOn) && validateOn.indexOf(\"blur\") > -1) || \n            (fieldConfig.validateOn && Array.isArray(fieldConfig.validateOn) && fieldConfig.validateOn.indexOf(\"blur\") > -1) || \n            (!fieldConfig.validateOn && typeof validateOn === \"function\" && validateOn(validateOnParams).indexOf(\"blur\") > -1) || \n            (fieldConfig.validateOn && typeof fieldConfig.validateOn === \"function\" && fieldConfig.validateOn(validateOnParams).indexOf(\"blur\") > -1)\n        ) {\n            const result = validateField(fieldKey, \"blur\", newData, errors);\n            setErrors(Object.assign({}, errors, result.errors));\n            limitedOnChange(newData, result.errors, id, fieldKey);\n        }\n\n        // Check if a field has dynamic options which have to be loaded:\n        if (Array.isArray(fieldPaths)) {\n            fieldPaths.forEach(fieldPath => {\n                if (\n                    fieldPath.config.dynamicOptions && \n                    fieldPath.config.dynamicOptions.events && \n                    fieldPath.config.dynamicOptions.events.indexOf(\"blur\") > -1 && \n                    fieldPath.config.dynamicOptions.watchFields && \n                    fieldPath.config.dynamicOptions.watchFields.indexOf(fieldConfig.id) > -1\n                ) {\n                    createDynamicOptions(fieldPath.config.id, fieldPath.config.dynamicOptions, newData);\n                }\n                if (typeof autoSave !== \"undefined\") {\n                    // if autoSave is enabled, but a field has autoSave disabled, remove it from autoSavedData:\n                    if (fieldPath.config.disableAutoSave) {\n                        unset(autoSavedData, fieldPath.path);\n                    }\n                }\n            });\n        }\n\n        addNewUndoEntry(newData);\n\n        // Auto save data if enabled:\n        if (typeof autoSave !== \"undefined\") {\n            if (autoSave === \"local\" || autoSave === \"session\") {\n                const currentErrors = validationErrors(false, newData);\n                if (Object.keys(currentErrors).length === 0) saveDataToStorage(id, { data: autoSavedData, isDirty, dirtyFields }, autoSave);\n            } else if (typeof autoSave === \"object\" && (autoSave.type === \"local\" || autoSave.type === \"session\")) {\n                const currentErrors = validationErrors(false, newData);\n                if ((autoSave.validDataOnly && Object.keys(currentErrors).length === 0) || !autoSave.validDataOnly) {\n                    saveDataToStorage(id, { data: autoSavedData, isDirty, dirtyFields }, autoSave.type);\n                }\n            } else if (typeof autoSave === \"object\" && autoSave.type === \"custom\" && typeof autoSave.save === \"function\") {\n                const currentErrors = validationErrors(false, newData);\n                if ((autoSave.validDataOnly && Object.keys(currentErrors).length === 0) || !autoSave.validDataOnly) {\n                    autoSave.save(id, { data: autoSavedData, isDirty, dirtyFields });\n                }\n            }\n        }\n        \n    };\n\n    /**\n     * Create the rendered fields object, which contain the correct React components together\n     * with the correct data in them.\n     * \n     * @return {object} An object of rendered fields, with each field represented as a React component.\n     */\n    const createRenderedFields = (startPath) => {\n        const renderedFields = {};\n        const notRenderedPaths = [];\n\n        const createField = (fieldConfig, fieldData, path) => {\n            let isInsideHiddenPath = false;\n            notRenderedPaths.forEach(nrp => {\n                if (path.startsWith(nrp)) isInsideHiddenPath = true;\n            });\n            if (isInsideHiddenPath) return null;\n            if (!fields[fieldConfig.type] && fieldConfig.type !== \"subform\" && fieldConfig.type !== \"group\") return null;\n            if (typeof fieldConfig.isRendered === \"function\" && !fieldConfig.isRendered(path, fieldData, alldata, interfaceState)) {\n                if (fieldConfig.type === \"group\") notRenderedPaths.push(path);\n                return null;\n            }\n            if (fieldConfig.type === \"group\") return null;\n\n            const cleanedField = Object.assign({}, fieldConfig);\n            cleanedField.id = path;\n\n            if (optionsLoaded[path]) {\n                cleanedField.options = optionsLoaded[path];\n            } else if (typeof cleanedField.options === \"function\") {\n                cleanedField.options = cleanedField.options(path, fieldData, alldata);\n            } else if (typeof cleanedField.computedOptions === \"object\") {\n                // Compute options from the data of a collection:\n                let options = get(data, cleanedField.computedOptions.source, []);\n                let fieldValue = get(alldata, path);\n\n                if (typeof cleanedField.computedOptions.filter === \"function\") options = options.filter(cleanedField.computedOptions.filter);\n                if (typeof cleanedField.computedOptions.sort === \"function\") options = options.sort(cleanedField.computedOptions.sort);\n                if (typeof cleanedField.computedOptions.map === \"function\") options = options.map(cleanedField.computedOptions.map);\n                if (cleanedField.computedOptions.initWith && Array.isArray(cleanedField.computedOptions.initWith)) options = cleanedField.computedOptions.initWith.concat(options);\n                \n                // If isUnique is set on this field, than disable all already selected options from other items in the collection:\n                if (fieldConfig.isUnique) {\n                    options = options.map(option => {\n                        if (option.value === \"\") return option;\n                        const collectionPath = path.substring(0, path.lastIndexOf(\"[\"));\n                        let collectionData = get(data, collectionPath, []);\n                        const dataIndex = findIndex(collectionData, { [fieldConfig.id]: option.value });\n                        if (dataIndex > -1 && option.value !== fieldValue) return {...option, disabled: true};\n                        return option;\n                    });\n                }\n\n                cleanedField.options = options;\n                \n                if (!find(options, { value: fieldValue })) {\n                    cleanedField.value = \"\";\n                    set(alldata, path, \"\");\n                }\n            }\n\n            // Remove special props from field before rendering:\n            delete cleanedField.computedValue;\n            delete cleanedField.computedOptions;\n            delete cleanedField.filter;\n            delete cleanedField.clearFields;\n            delete cleanedField.dynamicOptions;\n            delete cleanedField.isRendered;\n            delete cleanedField.defaultValue;\n            delete cleanedField.cleanUp;\n            delete cleanedField.precision;\n\n            // If placeholder is an array, pick one randomly\n            if (cleanedField.placeholder && Array.isArray(cleanedField.placeholder) && cleanedField.placeholder.length > 1) {\n                if (typeof chosenPlaceholders[path] === \"undefined\") {\n                    chosenPlaceholders[path] = cleanedField.placeholder[Math.floor(Math.random() * cleanedField.placeholder.length)];\n                }\n                cleanedField.placeholder = chosenPlaceholders[path];\n            }\n\n            // If this field type has a global custom error renderer and the specific field has no error renderer, use the global one:\n            if (typeValidations[fieldConfig.type] && typeof typeValidations[fieldConfig.type].renderer === \"function\" && !fieldConfig.errorRenderer) {\n                cleanedField.errorRenderer = typeValidations[fieldConfig.type].renderer;\n            }\n\n            // If this field has a pending async validation, set isValidationg to true\n            if (pendingAsyncValidations && pendingAsyncValidations[path]) cleanedField.isValidating = true;\n\n            const castValue = value => {\n                if (fieldConfig.cast && typeof fieldConfig.cast.field === \"function\") return fieldConfig.cast.field(value);\n                if (fieldConfig.cast && typeof fieldConfig.cast.field === \"string\") return castValueStrType(value, fieldConfig.cast.field);\n                if (fieldConfig.cast && Array.isArray(fieldConfig.cast.field)) return castValueStrType(value, fieldConfig.cast.field[0], true);\n                return value;\n            };\n\n            // Each prop can be a dynamic property, by a naming convention. We need to loop through all props to find them.\n            // Convention is that xxxFn becomes xxx after executing the function with the current Form state.\n            if (!isReservedType(fieldConfig.type)) {\n                Object.keys(cleanedField).forEach(prop => {\n                    if (prop !== \"id\" && typeof cleanedField[prop] === \"function\" && prop.endsWith(\"Fn\")) {\n                        cleanedField[prop.substring(0, prop.length - 2)] = cleanedField[prop]({ path, fieldData, alldata, interfaceState });\n                        delete cleanedField[prop];\n                    }\n                });\n            }\n\n            if (fieldConfig.type === \"fieldset\") {\n                return null;\n            }\n            \n            if (fieldConfig.type !== \"subform\") {\n                return React.createElement(\n                    fields[fieldConfig.type].component,\n                    Object.assign({\n                        key: path,\n                        value: castValue(fieldData),\n                        initialValue: get(initialData, path),\n                        error: errors[path],\n                        isDirty: !!dirtyFields[path],\n                        isDisabled: isDisabled || fieldConfig.isDisabled,\n                        hasFocus: !!(focusedField && focusedField === path),\n                        onChange: value => handleChange(path, value),\n                        onFocus: () => handleFocus(path),\n                        onBlur: () => handleBlur(path)\n                    }, cleanedField)\n                );\n            } else {\n                return (\n                    <Form\n                        config={fieldConfig.config}\n                        render={({ fieldProps }) => React.createElement(fieldConfig.render, fieldProps)}\n                        fields={fields}\n                        id={path}\n                        onChange={(value, subErrors) => handleChange(path, value)}\n                        onValidation={errors => handleSubValidation(path, errors)}\n                        parentRunValidation={runValidation}\n                        data={alldata && get(alldata, path)}\n                        isVisible={isVisible}\n                        isDisabled={isDisabled}\n                        validateOn={validateOn}\n                    />\n                );\n            } \n        };\n\n        fieldPaths.forEach(fieldPath => {\n            if (startPath && !fieldPath.path.startsWith(`${startPath}.`)) return;\n\n            if (fieldPath.config.type === \"fieldset\" && fieldsets[fieldPath.config.fieldset]) {\n                // Fieldsets need to be rendered here, with the render function from the fieldset:\n                const fieldsetFields = createRenderedFields(fieldPath.path);\n                set(renderedFields, fieldPath.path, fieldsets[fieldPath.config.fieldset].render({\n                    params: computeFieldsetParams(fieldPath.config.params || {}, fieldsets[fieldPath.config.fieldset].params),\n                    fieldProps: {\n                        fields: get(fieldsetFields, fieldPath.path),\n                        onCollectionAction,\n                        onWizardNav,\n                        getWizardNavHash,\n                        isWizardStepActive,\n                        isWizardStepDisabled,\n                        modifyConfig,\n                        data,\n                        interfaceState,\n                        errors,\n                        asyncData,\n                        isDirty,\n                        focusedField,\n                        lastFocusedField,\n                        dirtyFields,\n                        get,\n                        getConfig\n                    },\n                    actionProps: {\n                        handleActionClick,\n                        handleUndo,\n                        handleRedo,\n                        isDisabled,\n                        isDirty,\n                        focusedField,\n                        lastFocusedField,\n                        dirtyFields,\n                        silentlyGetValidationErrors\n                    },\n                }));\n            } else {\n                // Regular fields:\n                const fieldComponent = createField(fieldPath.config, fieldPath.data, fieldPath.path);\n                if (fieldComponent) set(renderedFields, fieldPath.path, fieldComponent);\n            }\n        });\n\n        return renderedFields;\n    };\n\n    /**\n     * This function handles adding and removing collection entries. It is\n     * called by the forms render method.\n     * \n     * @param {string} fieldKey the key for the field the collection belongs to\n     * @param {string} action the type of action to perform on the collection\n     * @param {number|string} index the index of the collection entry to perform the action on, or a string index if the collection is a union type\n     * @param {number|string} toIndex the index to move the entry to when the action is \"move\"\n     */\n    const onCollectionAction = (fieldKey, action, index, toIndex) => {\n        if (!isMounted()) return;\n\n        const newData = Object.assign({}, alldata);\n        const field = getConfigForField(fieldKey);\n        const minEntries = field && field.min ? Number(field.min) : 0;\n        const maxEntries = field && field.max ? Number(field.max) : 99999999999999; // easiest to just add an impossible high number\n        let updatedCollection = get(newData, fieldKey, []);\n        let newErrors;\n        let collectionIsUpdated = false;\n        if (index === \"last\") index = updatedCollection.length - 1;\n        if (toIndex === \"last\") toIndex = updatedCollection.length - 1;\n\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`On collection action \"${fieldKey}\"`, uniqId);\n\n        // This will add a new entry to the collection:\n        if (action === \"add\") {\n            if (typeof index === \"string\" && field.fields[index]) {\n                // This is a union type collection, we're adding a specific entry:\n                if (maxEntries > updatedCollection.length) {\n                    if (typeof field.setInitialData === \"function\") {\n                        updatedCollection.push(field.setInitialData(updatedCollection, newData, index));\n                    } else {\n                        updatedCollection.push({__typename: index});\n                    }\n                }\n            } else {\n                if (maxEntries > updatedCollection.length) {\n                    if (typeof field.setInitialData === \"function\") {\n                        updatedCollection.push(field.setInitialData(updatedCollection, newData));\n                    } else {\n                        updatedCollection.push({});\n                    }\n                }\n            }\n            collectionIsUpdated = true;\n        }\n\n        // This will remove a specific entry in the collection:\n        if (action === \"remove\") {\n            if (minEntries < updatedCollection.length) updatedCollection.splice(index, 1);\n            collectionIsUpdated = true;\n        }\n\n        // This action will move a certain entry from one index to another index, which is very useful with \n        // react-beautiful-dnd\n        if (action === \"move\" && typeof index === \"number\" && typeof toIndex === \"number\" && index > -1 && toIndex > -1) {\n            const [removed] = updatedCollection.splice(index, 1);\n            updatedCollection.splice(toIndex, 0, removed);\n            collectionIsUpdated = true;\n        }\n\n        // This action uses Lodash sortBy to sort the collection:\n        if (action === \"sort\" && updatedCollection.length > 0 && index) {\n            updatedCollection = sortBy(updatedCollection, index);\n            collectionIsUpdated = true;\n        }\n\n        // This action duplicates a specific collection entry:\n        if (action === \"duplicate\" && typeof index === \"number\" && index > -1) {\n            updatedCollection.splice(index+1, 0, Object.assign({}, updatedCollection[index]));\n            collectionIsUpdated = true;\n        }\n\n        if (field.sort && field.sort.by) {\n            updatedCollection = sortBy(updatedCollection, field.sort.by);\n            if (field.sort.dir === \"desc\") updatedCollection = updatedCollection.reverse();\n            collectionIsUpdated = true;\n        }\n\n        // Use this one if you manually updated the collection and want Stages to recalculate isDirty and validations:\n        if (action === \"update\" && Array.isArray(index)) {\n            collectionIsUpdated = true;\n            set(newData, fieldKey, index);\n        } else {\n            set(newData, fieldKey, updatedCollection);\n        }\n\n        if (collectionIsUpdated) {\n            const oldCollectionData = get(initialData, fieldKey);\n            const newCollectionData = get(newData, fieldKey);\n            try {\n                if (JSON.stringify(oldCollectionData) !== JSON.stringify(newCollectionData)) {\n                    setIsDirty(true);\n                    dirtyFields[fieldKey] = {\n                        oldData: oldCollectionData,\n                        newData: newCollectionData\n                    }\n                    setDirtyFields(dirtyFields);\n                } else {\n                    delete dirtyFields[fieldKey];\n                    Object.keys(dirtyFields).forEach(key => {\n                        if (key.startsWith(fieldKey)) delete dirtyFields[key];\n                    });\n                    setDirtyFields(dirtyFields);\n                    setIsDirty(Object.keys(dirtyFields).length > 0);\n                }\n            } catch (e) {}\n        }\n\n        // Only validate if collection action validation is enabled:\n        if (validateOn.indexOf(\"collectionAction\") > -1 || (field.validateOn && field.validateOn.indexOf(\"collectionAction\") > -1)) {\n            const result = validateField(fieldKey, \"collectionAction\", newData, errors);\n            newErrors = Object.assign({}, errors, result.errors);\n            setErrors(newErrors);\n        }\n\n        limitedOnChange(newData, newErrors || validationErrors(), id, fieldKey);\n    };\n\n    const onWizardNav = (navType, path, stage) => {\n        const newActiveStages = {...activeStages};\n        const currentStage = newActiveStages[path];\n        const fieldConfig = getConfigForField(path);\n\n        if (navType === \"step\") newActiveStages[path] = stage;\n\n        if (navType === \"next\") {\n            // Find the next step and set it active:\n            const nextIndex = findIndex(fieldConfig.stages, { id: currentStage }) + 1;\n            if (fieldConfig.stages[nextIndex]) {\n                newActiveStages[path] = fieldConfig.stages[nextIndex].id;\n            }\n        }\n\n        if (navType === \"prev\") {\n            // Find the previous step and set it active:\n            const prevIndex = findIndex(fieldConfig.stages, { id: currentStage }) - 1;\n            if (fieldConfig.stages[prevIndex]) {\n                newActiveStages[path] = fieldConfig.stages[prevIndex].id;\n            }\n        }\n\n        if (navType === \"first\") {\n            // Find the first step and set it active:\n            newActiveStages[path] = fieldConfig.stages[0].id;\n        }\n\n        if (navType === \"last\") {\n            // Find the last step and set it active:\n            newActiveStages[path] = fieldConfig.stages[fieldConfig.stages.length - 1].id;\n        }\n\n        setActiveStages(newActiveStages);\n    };\n\n    const getWizardNavHash = (path, stage, action = \"step\") => {\n        const currentStage = activeStages[path];\n        const fieldConfig = getConfigForField(path);\n        const hashes = [];\n\n        if (action === \"step\" || action === \"first\" || action === \"last\") {\n            Object.keys(activeStages).forEach(key => {\n                if (key.startsWith(path)) {\n                    if (action === \"step\") hashes.push(`${key}.${stage}`);\n                    if (action === \"first\") hashes.push(`${key}.${fieldConfig.stages[0].id}`);\n                    if (action === \"last\") hashes.push(`${key}.${fieldConfig.stages[fieldConfig.stages.length - 1].id}`);\n                } else {\n                    hashes.push(`${key}.${activeStages[key]}`);\n                }\n            });\n            return `#!${hashes.join(hashSeparator || \":\")}`;\n        }\n\n        if (action === \"prev\") {\n            const prevIndex = findIndex(fieldConfig.stages, { id: currentStage }) - 1;\n            if (fieldConfig.stages[prevIndex]) {\n                Object.keys(activeStages).forEach(key => {\n                    if (key.startsWith(path)) {\n                        hashes.push(`${key}.${fieldConfig.stages[prevIndex].id}`);\n                    } else {\n                        hashes.push(`${key}.${activeStages[key]}`);\n                    }\n                });\n                return `#!${hashes.join(hashSeparator || \":\")}`;\n            }\n            return false;\n        }\n\n        if (action === \"next\") {\n            const nextIndex = findIndex(fieldConfig.stages, { id: currentStage }) + 1;\n            if (fieldConfig.stages[nextIndex]) {\n                Object.keys(activeStages).forEach(key => {\n                    if (key.startsWith(path)) {\n                        hashes.push(`${key}.${fieldConfig.stages[nextIndex].id}`);\n                    } else {\n                        hashes.push(`${key}.${activeStages[key]}`);\n                    }\n                });\n                return `#!${hashes.join(hashSeparator || \":\")}`;\n            }\n            return false;\n        }\n\n        return false;\n    };\n\n    const isWizardStepActive = (path, stage) => {\n        return activeStages[path] === stage;\n    };\n\n    const isWizardStepDisabled = (path, hash, disableIfActive = false) => {\n        // Depending on validation rules, a step can be disabled\n        const hashesSplit = hash.substring(2).split(hashSeparator || \":\");\n        let stage = \"\";\n        hashesSplit.forEach(hash => {\n            if (hash.startsWith(`${path}.`)) stage = hash.substring(path.length + 1);\n        });\n        if (stage) {\n            const fieldConfig = getConfigForField(path);\n            const thisIndex = findIndex(fieldConfig.stages, { id: stage });\n            const activeIndex = findIndex(fieldConfig.stages, { id: activeStages[path] });\n\n            // Only advance one step at a time:\n            if (thisIndex > activeIndex + 1) return true;\n\n            // if \"disableIfActive\" is \"true\", disable the step if it's active:\n            if (disableIfActive && isWizardStepActive(path, stage)) return true;\n\n            // Only advance if all previous steps are valid:\n            for (let i = 0; i < thisIndex; i++) {\n                const thisErrors = validationErrors(false, data, `${path}.${fieldConfig.stages[i].id}`);\n                if (Object.keys(thisErrors).length > 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    /**\n     * This adds a specific config to the field configuration at a certain path\n     * \n     * @param {string} path The path to the field config which should be modified\n     * @param {string} configKey The key of the `fieldConfigs` property to modify\n     * @param {string} action The action to perform on the `fieldConfigs` property\n     */\n    const modifyConfig = (path, configKey, action) => {\n        if (config.fieldConfigs && typeof config.fieldConfigs[configKey] === \"function\") {\n            const pathParts = path.split(\".\");\n            let configPath = \"\";\n\n            pathParts.forEach(pathPart => {\n                const thisConfig = configPath ? get(parsedFieldConfig, configPath) : parsedFieldConfig;\n                if (pathPart.endsWith(\"]\")) {\n                    const pathPartSplit = pathPart.split(\"[\");\n                    const realPathPart = pathPartSplit[0];\n                    const configIndex = findIndex(thisConfig, { id: realPathPart });\n                    if (configIndex > -1) configPath += `[${configIndex}].fields`;\n                } else {\n                    const configIndex = findIndex(thisConfig, { id: pathPart });\n                    if (configIndex > -1) configPath += `[${configIndex}].fields`;\n                }\n            });\n\n            if (configPath !== \"\") {\n                modifiedConfigs.push({\n                    fields: config.fieldConfigs[configKey],\n                    path: configPath,\n                    action\n                });\n                setModifiedConfigs([...modifiedConfigs]);\n            }\n        }\n    };\n\n    /**\n     * The function is called by the forms action buttons. It either runs the validation\n     * or just the supplied callback.\n     * \n     * @param {function} callback function called if no validation errors\n     * @param {boolean} validate  whether to run validation or not\n     * @param {boolean} reset whether to reset back to initial data or not\n     */\n    const handleActionClick = (callback, validate, reset) => {\n        // @ts-ignore\n        if (isDebugging()) window.stagesLogging(`Handle action click`, uniqId);\n\n        // If this is a reset action, we reset back to the initial data:\n        if (reset) {\n            if (autoSave === \"local\" || autoSave === \"session\") removeDataFromStorage(id, autoSave);\n            if (typeof autoSave === \"object\" && (autoSave.type === \"local\" || autoSave.type === \"session\")) {\n                removeDataFromStorage(id, autoSave.type);\n            }\n            if (id && typeof autoSave === \"object\" && autoSave.type === \"custom\" && typeof autoSave.remove === \"function\") {\n                autoSave.remove(id);\n            }\n            limitedOnChange(initialData, validationErrors(), id);\n            setDirtyFields({});\n            setIsDirty(false);\n        }\n\n        // Are there any custom events active?\n        const activeCustomEvents = getActiveCustomEvents(\"action\", alldata);\n        let suppressCallback = false;\n\n        // Only validate if action validation is enabled (which is the default):\n        if (\n            (Array.isArray(validateOn) && validateOn.indexOf(\"action\") > -1) || \n            (Array.isArray(validateOn) && activeCustomEvents.some(r=> validateOn.indexOf(r) > -1))\n        ) {\n            if (validate) {\n                setRunValidation(true);\n                setTimeout(() => setRunValidation(false), 0);\n            }\n            let errors = validate ? validationErrors(true) : {};\n            setErrors(errors);\n            if (Object.keys(errors).length > 0) suppressCallback = true;\n        }\n\n        if (!suppressCallback) callback();\n    };\n\n    const updateData = (data) => {\n        limitedOnChange(data, validationErrors(), id);\n\n        // We need to recalculate dirty fields!\n        let newIsDirty = false;\n        let newDirtyFields = {};\n        fieldPaths.forEach(fieldPath => {\n            if (!fieldPath.config.isInterfaceState) {\n                const newPathData = get(data, fieldPath.path);\n                const initialPathData = get(initialData, fieldPath.path);\n                if (newPathData !== initialPathData) {\n                    newIsDirty = true;\n                    if (typeof newPathData !== \"undefined\") {\n                        newDirtyFields[fieldPath.path] = { oldData: initialPathData, newData: newPathData };\n                    }\n                }\n            }\n        });\n        setIsDirty(newIsDirty);\n        setDirtyFields(newDirtyFields);\n    };\n\n    const getConfig = (path) => {\n        const fieldPath = find(fieldPaths, { path: path });\n        return fieldPath ? fieldPath.config : undefined;\n    };\n\n    // If the form isn't visible, render nothing (this is needed for the Wizards step validation):\n    if (isVisible === false) return null;\n\n    // Render all the render props:\n    return render ? render({\n        actionProps: {\n            handleActionClick,\n            handleUndo,\n            handleRedo,\n            isDisabled: pendingAsyncValidations && Object.keys(pendingAsyncValidations).length > 0 ? true : isDisabled,\n            isDirty,\n            focusedField,\n            lastFocusedField,\n            dirtyFields,\n            silentlyGetValidationErrors,\n            updateData\n        },\n        fieldProps: {\n            fields: createRenderedFields(),\n            onCollectionAction,\n            onWizardNav,\n            getWizardNavHash,\n            isWizardStepActive,\n            isWizardStepDisabled,\n            modifyConfig,\n            data,\n            interfaceState,\n            errors,\n            asyncData,\n            isDirty,\n            focusedField,\n            lastFocusedField,\n            dirtyFields,\n            get,\n            getConfig\n        },\n        loading\n    }) : renderFields ? renderFields(createRenderedFields()) : null;\n};\n\nForm.propTypes = {\n    //** @type {Object} The form configuration, can be a function or an object describing all fields */\n    config: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.func]).isRequired,\n    //** @type {Object} The form data, which sould come from React state and be udated from the onChange callback */\n    data: PropTypes.object,\n    //** @type {React.ReactElement|Function} The render function which renders all the forms fields */\n    render: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    //** @type {React.ReactElement|Function} The simplified render function which renders only the forms fields */\n    renderFields: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    //** @type {Object} An object containing all the possible fields */\n    fields: PropTypes.object.isRequired,\n    //** @type {Function} A callback which is called when data has been changed. This should update the Form data. */\n    onChange: PropTypes.func,\n    //** @type {boolean} Whether the form is visible */\n    isVisible: PropTypes.bool,\n    //** @type {boolean} Whether the form is disabled */\n    isDisabled: PropTypes.bool,\n    //** @type {string|number} The forms id. Will be displayed in the debugger and is used for the data key in a wizard */\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    //** @type {Function} A callback which is called when the form is being validated */\n    onValidation: PropTypes.func,\n    //** @type {boolean} Whether the form is being validated */\n    parentRunValidation: PropTypes.bool,\n    //** @type {string[]} An array of events on when to run validation */\n    validateOn: PropTypes.array,\n    //** @type {Object} Custom collection rule handlers */\n    customRuleHandlers: PropTypes.object,\n    //** @type {number} The maximum depth of undo steps */\n    undoMaxDepth: PropTypes.number,\n    //** @type {Object} Global per type based custom validations */\n    typeValidations: PropTypes.object,\n    //** @type {Object} Definition for fieldsets containing fields config and a render function for multiple fields */\n    fieldsets: PropTypes.object,\n    //** @type {Object} The initial value for the forms interface state */\n    initialInterfaceState: PropTypes.object\n};\n\nForm.defaultProps = {\n    data: {},\n    onChange: () => {},\n    isVisible: true,\n    isDisabled: false,\n    validateOn: [\"action\"],\n    customRuleHandlers: {},\n    undoMaxDepth: 10,\n    autoSave: false,\n    typeValidations: {},\n    fieldsets: {},\n    initialInterfaceState: {}\n};\n\nexport default Form;","import React from \"react\";\n\n/**\n * This is a default component for a forms action buttons. It is ment as\n * a sample on how to build your own, but of course you can use it if it\n * fits your usecase.\n *\n * @param {Array} config - an array of objects containing `title`,\n * `type`, `onClick`, and `validate` properties for each button\n * @param {Function} handleActionClick - a function that handles clicks\n * on the buttons\n * @param {Boolean} isDisabled - a boolean value that determines whether\n * the buttons are disabled or not\n * @return {JSX.Element} a list of button components\n */\nconst Actions = ({ config, handleActionClick, isDisabled }) => (\n    <>\n        {config.map((action, index) =>{\n            if (action.type === \"primary\") {\n                return (\n                    <button\n                        type=\"button\"\n                        onClick={() => handleActionClick(action.onClick, action.validate)}\n                        key={`action-${index}`}\n                        disabled={isDisabled}\n                    >\n                        <strong>{action.title}</strong>\n                    </button>\n                );\n            }\n            return (\n                <button\n                    type=\"button\"\n                    onClick={() => handleActionClick(action.onClick, action.validate)}\n                    key={`action-${index}`}\n                    disabled={isDisabled}\n                >\n                    {action.title}\n                </button>\n            );\n        })}\n    </>\n);\n\nexport default Actions;","import React from \"react\";\n\n/*\n\nEach field must bring at least:\n- id (acts as name etc.)\n- label\n\nOptional:\n- value\n- error\n- onChange\n- onValidate\n- placeholder\n- isRequired\n- disabled\n- prefix\n- suffix\n- secondaryText\n\n*/\n\nconst Input = ({\n    id,\n    label,\n    value,\n    onChange,\n    onBlur,\n    onFocus,\n    error,\n    placeholder,\n    isRequired,\n    isDisabled,\n    isValidating,\n    hasFocus,\n    prefix,\n    suffix,\n    secondaryText,\n    type,\n    errorRenderer,\n    ...props // this will give you all other props, things like validateOn, the computedValue function etc. or custom props\n}) => {\n    console.log({ id, value });\n    return (\n        <div>\n            {label ? <label htmlFor={id}>{label}{isRequired ? \" *\" : \"\"}</label> : null}\n            <div>\n                {prefix ? <span>{prefix}</span> : null}\n                <input\n                    id={id}\n                    name={id}\n                    value={typeof value !== \"undefined\" ? value : type === \"number\" ? 0 : \"\"}\n                    placeholder={placeholder}\n                    type={type || \"text\"}\n                    disabled={!!isDisabled}\n                    required={!!isRequired}\n                    autoComplete={type === \"password\" ? \"current-password\" : \"off\"}\n                    onChange={e => {\n                        if (typeof onChange === \"function\") onChange(e.target.value);\n                    }}\n                    onFocus={e => {\n                        if (typeof onFocus === \"function\") onFocus();\n                    }}\n                    onBlur={e => {\n                        if (typeof onBlur === \"function\") onBlur();\n                    }}\n                />\n                {suffix ? <span>{suffix}</span> : null}\n            </div>\n            {secondaryText ? <div>{secondaryText}</div> : null}\n            {error && !isValidating ? errorRenderer ? errorRenderer(error) : (\n                <div style={{ color: \"red\" }}>Please fill out this field!</div>\n            ) : null}\n            {isValidating ? <div style={{ color: \"#999\" }}>Field is validating ...</div> : null}\n        </div>\n    );\n}\n\nexport const isValid = (value, config) => {\n    if (config.isRequired && (value === \"\" || typeof value === \"undefined\")) return false;\n    return true;\n};\n\nexport default Input;","import React from \"react\";\n\n/*\n\nEach field must bring at least:\n- id (acts as name etc.)\n- label\n\nOptional:\n- value\n- error\n- onChange\n- onValidate\n- placeholder\n- isRequired\n- disabled\n- prefix\n- suffix\n- secondaryText\n\n*/\n\nconst CheckBox = ({\n    id,\n    label,\n    value,\n    onChange,\n    onBlur,\n    onFocus,\n    error,\n    placeholder,\n    isRequired,\n    isDisabled,\n    isValidating,\n    prefix,\n    suffix,\n    secondaryText,\n    type,\n    errorRenderer,\n    ...props // this will give you all other props, things like validateOn, the computedValue function etc. or custom props\n}) => {\n    return (\n        <div>\n            {label ? <label htmlFor={id}>{label}{isRequired ? \" *\" : \"\"}</label> : null}\n            <div>\n                {prefix ? <span>{prefix}</span> : null}\n                <input\n                    id={id}\n                    name={id}\n                    value=\"1\"\n                    placeholder={placeholder}\n                    type={type}\n                    disabled={!!isDisabled}\n                    required={!!isRequired}\n                    checked={!!value}\n                    onChange={() => {/* to make React and IE happy */}}\n                    onClick={e => {\n                        if (typeof onChange === \"function\") onChange(e.target.checked ? true : false);\n                    }}\n                    onBlur={e => {\n                        if (typeof onBlur === \"function\") onBlur();\n                    }}\n                    onFocus={e => {\n                        if (typeof onFocus === \"function\") onFocus();\n                    }}\n                />\n                {suffix ? <span>{suffix}</span> : null}\n            </div>\n            {secondaryText ? <div>{secondaryText}</div> : null}\n            {error && !isValidating ? errorRenderer ? errorRenderer(error) : (\n                <div style={{ color: \"red\" }}>Please fill out this field!</div>\n            ) : null}\n            {isValidating ? <div style={{ color: \"#999\" }}>Field is validating ...</div> : null}\n        </div>\n    );\n}\n\nexport const isValid = (value, config) => {\n    if (config.isRequired && (value === \"\" || typeof value === \"undefined\")) return false;\n    return true;\n};\n\nexport default CheckBox;","import React from \"react\";\n\n/*\n\nEach field must bring at least:\n- id (acts as name etc.)\n- label\n\nOptional:\n- value\n- error\n- onChange\n- onValidate\n- placeholder\n- isRequired\n- disabled\n- prefix\n- suffix\n- secondaryText\n\n*/\n\nconst Select = ({\n    id,\n    label,\n    value,\n    options,\n    onChange,\n    onBlur,\n    onFocus,\n    error,\n    placeholder,\n    isRequired,\n    isDisabled,\n    isValidating,\n    prefix,\n    suffix,\n    secondaryText,\n    errorRenderer,\n    ...props // this will give you all other props, things like validateOn, the computedValue function etc. or custom props\n}) => {\n    return (\n        <div>\n            {label ? <label htmlFor={id}>{label}{isRequired ? \" *\" : \"\"}</label> : null}\n            <div>\n                {prefix ? <span>{prefix}</span> : null}\n                <select\n                    id={id}\n                    name={id}\n                    value={typeof value === \"undefined\" ? \"\" : value}\n                    placeholder={placeholder}\n                    disabled={!!isDisabled}\n                    required={!!isRequired}\n                    onChange={e => {\n                        if (typeof onChange === \"function\") onChange(e.target.value);\n                    }}\n                    onBlur={e => {\n                        if (typeof onBlur === \"function\") onBlur();\n                    }}\n                    onFocus={e => {\n                        if (typeof onFocus === \"function\") onFocus();\n                    }}\n                >\n                    {options.map(option => <option value={option.value} key={option.value} disabled={option.disabled ? true : null}>{option.text}</option>)}\n                </select>\n                {suffix ? <span>{suffix}</span> : null}\n            </div>\n            {secondaryText ? <div>{secondaryText}</div> : null}\n            {error && !isValidating ? errorRenderer ? errorRenderer(error) : (\n                <div style={{ color: \"red\" }}>Please fill out this field!</div>\n            ) : null}\n            {isValidating ? <div style={{ color: \"#999\" }}>Field is validating ...</div> : null}\n        </div>\n    );\n}\n\nexport const isValid = (value, config) => {\n    if (config.isRequired && (value === \"\" || typeof value === \"undefined\")) return false;\n    return true;\n};\n\nexport default Select;","import React, { Fragment } from \"react\";\n\n/*\n\nEach field must bring at least:\n- id (acts as name etc.)\n- label\n\nOptional:\n- value\n- error\n- onChange\n- onValidate\n- placeholder\n- isRequired\n- disabled\n- prefix\n- suffix\n- secondaryText\n\n*/\n\nconst RadioGroup = ({\n    id,\n    label,\n    value,\n    options,\n    onChange,\n    onBlur,\n    onFocus,\n    error,\n    isRequired,\n    isDisabled,\n    isValidating,\n    prefix,\n    suffix,\n    secondaryText,\n    errorRenderer,\n    ...props // this will give you all other props, things like validateOn, the computedValue function etc. or custom props\n}) => {\n    return (\n        <div id={id}>\n            {label ? <label>{label}{isRequired ? \" *\" : \"\"}</label> : null}\n            <div>\n                {prefix ? <span>{prefix}</span> : null}\n                {options.map(option => {\n                    return (\n                        <Fragment key={`${id}-${option.value}`}>\n                            <input\n                                type=\"radio\"\n                                name={id}\n                                id={`${id}-${option.value}`}\n                                value={option.value}\n                                checked={value === option.value}\n                                disabled={!!isDisabled}\n                                onChange={() => {/* to make React and IE happy */}}\n                                onClick={e => {\n                                    if (typeof onChange === \"function\") onChange(option.value);\n                                }}\n                                onBlur={e => {\n                                    if (typeof onBlur === \"function\") onBlur();\n                                }}\n                                onFocus={e => {\n                                    if (typeof onFocus === \"function\") onFocus();\n                                }}\n                            />\n                            <label htmlFor={`${id}-${option.value}`}>{option.text}</label>\n                            {\" \"}\n                        </Fragment>\n                    );\n                })}\n                {suffix ? <span>{suffix}</span> : null}\n            </div>\n            {secondaryText ? <div>{secondaryText}</div> : null}\n            {error && !isValidating ? errorRenderer ? errorRenderer(error) : (\n                <div style={{ color: \"red\" }}>Please fill out this field!</div>\n            ) : null}\n            {isValidating ? <div style={{ color: \"#999\" }}>Field is validating ...</div> : null}\n        </div>\n    );\n};\n\nexport const isValid = (value, config) => {\n    if (config.isRequired && (value === \"\" || typeof value === \"undefined\")) return false;\n    return true;\n};\n\nexport default RadioGroup;","import React from \"react\";\n\n/*\n\nThis field is to be used for additional error handling of a combination of fields.\n\n*/\n\nconst Dummy = ({\n    id,\n    label,\n    error,\n    isRequired,\n    isValidating,\n    secondaryText,\n    errorRenderer,\n    ...props // this will give you all other props, things like validateOn, the computedValue function etc. or custom props\n}) => {\n    if (label || secondaryText || error) {\n        return (\n            <div id={id}>\n                {label ? <label htmlFor={id}>{label}{isRequired ? \" *\" : \"\"}</label> : null}\n                {secondaryText ? <div>{secondaryText}</div> : null}\n                {error && !isValidating ? errorRenderer ? errorRenderer(error) : (\n                    <div style={{ color: \"red\" }}>Please fill out this field!</div>\n                ) : null}\n                {isValidating ? <div style={{ color: \"#999\" }}>Field is validating ...</div> : null}\n            </div>\n        );\n    }\n    return null;\n}\n\nexport default Dummy;","import Input, { isValid as inputIsValid } from \"./Input\";\nimport CheckBox, { isValid as checkBoxIsValid } from \"./CheckBox\";\nimport Select, { isValid as selectIsValid } from \"./Select\";\nimport RadioGroup, { isValid as radioGroupIsValid } from \"./RadioGroup\";\nimport Dummy from \"./Dummy\";\n\nconst fields = {\n    text: {\n        component: Input,\n        isValid: inputIsValid\n    },\n    number: {\n        component: Input,\n        isValid: inputIsValid\n    },\n    email: {\n        component: Input,\n        isValid: inputIsValid\n    },\n    password: {\n        component: Input,\n        isValid: inputIsValid\n    },\n    tel: {\n        component: Input,\n        isValid: inputIsValid\n    },\n    time: {\n        component: Input,\n        isValid: inputIsValid\n    },\n    date: {\n        component: Input,\n        isValid: inputIsValid\n    },\n    checkbox: {\n        component: CheckBox,\n        isValid: checkBoxIsValid\n    },\n    select: {\n        component: Select,\n        isValid: selectIsValid\n    },\n    radio: {\n        component: RadioGroup,\n        isValid: radioGroupIsValid\n    },\n    dummy: {\n        component: Dummy,\n        isValid: () => true\n    }\n};\n\nexport default fields;"],"names":["b","Symbol","for","c","d","e","f","g","h","k","l","m","n","p","q","r","t","v","w","x","y","z","a","u","$$typeof","type","A","emptyFunction","emptyFunctionWithReset","module","exports","require$$0","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","require$$2","getDataFromStorage","id","prefix","localStorage","sessionStorage","stringifiedStoredState","getItem","storedState","JSON","parse","saveDataToStorage","data","stringifiedState","stringify","setItem","removeDataFromStorage","removeItem","isDebugging","window","stagesLogging","Stages","_ref","children","initialData","initialStep","render","validateOnStepChange","onChange","autoSave","uniqId","useState","Date","setData","createInitialData","get","savedData","Object","keys","length","activeChildren","setActiveChildren","errors","setErrors","currentStep","setCurrentStep","setKeys","getStepData","index","key","setStepKey","visible","handleOnChange","changedData","stepErrors","formId","newData","assign","save","validDataOnly","reset","remove","useEffect","map","item","initializing","filter","lastValidStep","calculateLastValidStep","allData","onNav","isActive","isVisible","navType","nr","newStepNr","found","i","Number","findIndex","stepFailed","forEach","keysIndex","navigationProps","onChangeStep","step","stepCount","progressionProps","calculateProgression","validSteps","error","stepData","percentage","routerProps","steps","propTypes","defaultProps","HashRouter","hashFormat","hash","setHash","useHash","onHashChange","useCallback","useLifecycles","mount","unmount","obj","addEventListener","slice","call","arguments","on","removeEventListener","off","_setHash","newHash","isMounted","setIsMounted","getHashFromIndex","stepIndex","handleHashes","indexOf","hashSplit","split","hashStr","str","Math","floor","Infinity","String","isPositiveInteger","getIndexFromHash","fn","Navigation","items","stepName","push","React","createElement","style","textTransform","color","onClick","Progression","round","Debugger","logHistory","setLogHistory","selection","setSelection","paths","setPaths","showDebugger","setShowDebugger","getData","eventData","action","time","firstKey","sel","tab","position","top","right","width","padding","fontSize","border","borderRadius","background","fontFamily","zIndex","lineHeight","float","keySplit","pop","output","join","beautify","margin","isDirty","display","loading","target","value","minWidth","maxWidth","marginRight","height","Fragment","placeholder","newPaths","marginTop","overflowX","whiteSpace","readOnly","castValueStrType","parseAsArray","Array","isArray","Boolean","computeFieldsetParams","fieldConfig","paramConfig","params","default","required","console","warn","latestOptionsRequestIDsPerField","pendingAsyncValidations","timeoutRef","lastOnChangeData","lastOnChange","chosenPlaceholders","Form","config","renderFields","fields","isDisabled","onValidation","parentRunValidation","validateOn","throttleWait","customEvents","enableUndo","undoMaxDepth","customRuleHandlers","typeValidations","fieldsets","initialInterfaceState","hashSeparator","mounted","useRef","interfaceState","setInterfaceState","alldata","merge","setIsDirty","dirtyFields","setDirtyFields","setInitialData","undoData","setUndoData","activeUndoIndex","setActiveUndoIndex","runValidation","setRunValidation","dataLoaded","setDataLoaded","optionsLoaded","setOptionsLoaded","optionsCache","setOptionsCache","asyncData","setAsyncData","setLoading","focusedField","setFocusedField","lastFocusedField","setLastFocusedField","modifiedConfigs","setModifiedConfigs","activeStages","setActiveStages","parsedFieldConfig","parseConfig","parsedConfig","parseConfigItem","configItem","fieldConfigs","thisParsedConfig","fieldset","field","stages","stage","modifiedConfig","path","splice","set","fieldPaths","getFieldPaths","getPathsForPath","renderPath","pathType","thisConfigs","thisKeys","values","isActiveStage","thisConfig","unionIndex","unionKey","undefined","itemRenderPath","itemData","unionData","__typename","thisData","colItem","colIndex","current","hashParts","substring","newActiveStages","hashPart","partSplit","partPath","partStage","fieldPath","find","newErrors","defaultValue","fieldErrors","validateField","stringifiedData","setTimeout","limitedOnChange","validationErrors","isReservedType","isFieldValid","fieldKey","fieldData","triggeringEvent","isValid","validation","customValidation","fieldHasFocus","fieldIsDirty","regexValidation","RegExp","test","customValidationResult","prototype","toString","isPromise","now","then","validationData","firstErrorField","fieldIsValid","fieldValidationData","subField","dataEntry","arrayFieldPath","errorCode","isUnique","collectionData","Set","uniqEntries","uniqWith","arrVal","othVal","rules","ruleField","valueRules","ruleFields","fieldValueCombos","arr1","arr2","res","arr1Item","arr2Item","getCombosFromTwoArrays","ruleConformsToData","maxCount","fieldValueCombo","count","minCount","exactCount","sameCountAs","otherValueCount","differentCountAs","sameSumAs","differentSumAs","biggerSumAs","smallerSumAs","sum1","sum2","thisValue1","thisValue2","isNaN","valueCombos","duplicateFound","combo","isEqual","disallow","bannedValueFound","searchValueFound","requiredValueFound","customRule","isUserAction","rootPath","startsWith","result","document","getElementById","el","rect","getBoundingClientRect","left","bottom","innerHeight","documentElement","clientHeight","innerWidth","clientWidth","isElementInViewport","scrollIntoView","silentlyGetValidationErrors","handleSubValidation","subId","subErrors","createDynamicOptions","optionsConfig","updatedData","_temp3","loader","_temp2","enableCaching","updateOptionsCache","options","latestCache","cacheKey","nrAfterAsyncCall","newNr","updateOptionsLoaded","onOptionsChange","handleChange","cacheKeyValues","watchFields","_temp","Promise","resolve","_optionsConfig$loader","reject","forceChange","newLastOnChangeData","isInterfaceState","pathData","unset","removeInterfaceState","handleUndo","newIndex","oldState","handleRedo","init","minEntries","min","computeValues","asyncDataLoader","dynamicOptions","events","computedValue","getConfigForField","getActiveCustomEvents","fieldValue","activeCustomEvents","arrayToStringIfOnlyOneEntry","arr","outsideData","syntheticCall","throttleValidation","timestamp","newValue","cast","validateOnParams","clearTimeout","some","oldData","clearFields","newOptionsLoaded","secondLastEntry","at","isCollectionField","collectionKey","pathParts","newPath","lastIndex","lastIndexOf","getParentPath","collectionConfig","sort","by","sortBy","dir","reverse","createRenderedFields","startPath","renderedFields","notRenderedPaths","fieldsetFields","fieldProps","onCollectionAction","onWizardNav","getWizardNavHash","isWizardStepActive","isWizardStepDisabled","modifyConfig","getConfig","actionProps","handleActionClick","fieldComponent","createField","isInsideHiddenPath","nrp","isRendered","cleanedField","computedOptions","source","initWith","concat","option","collectionPath","disabled","cleanUp","precision","random","renderer","errorRenderer","isValidating","prop","endsWith","component","initialValue","hasFocus","onFocus","handleFocus","onBlur","autoSavedData","toFixed","disableAutoSave","newUndoData","shift","addNewUndoEntry","currentErrors","handleBlur","_ref2","toIndex","maxEntries","max","updatedCollection","collectionIsUpdated","removed","oldCollectionData","newCollectionData","currentStage","nextIndex","prevIndex","hashes","disableIfActive","hashesSplit","thisIndex","thisErrors","configKey","configPath","pathPart","pathPartSplit","configIndex","callback","validate","suppressCallback","updateData","newIsDirty","newDirtyFields","newPathData","initialPathData","Actions","title","_excluded","Input","label","suffix","secondaryText","_objectWithoutPropertiesLoose","log","htmlFor","autoComplete","text","inputIsValid","email","password","tel","date","checkbox","checked","select","radio","dummy"],"mappings":"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"}